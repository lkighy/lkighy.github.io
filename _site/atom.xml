<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-08-22T16:17:53-07:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">青丘梦</title><subtitle>一个以兴趣为动力的自学者.</subtitle><author><name>lkighy</name></author><entry><title type="html">WebAssembly 之书目录</title><link href="http://localhost:4000/rust/webassembly/2019/08/22/WebAssembly%E4%B9%8B%E4%B9%A6%E7%9B%AE%E5%BD%95/" rel="alternate" type="text/html" title="WebAssembly 之书目录" /><published>2019-08-22T00:00:00-07:00</published><updated>2019-08-22T00:00:00-07:00</updated><id>http://localhost:4000/rust/webassembly/2019/08/22/WebAssembly%E4%B9%8B%E4%B9%A6%E7%9B%AE%E5%BD%95</id><content type="html" xml:base="http://localhost:4000/rust/webassembly/2019/08/22/WebAssembly%E4%B9%8B%E4%B9%A6%E7%9B%AE%E5%BD%95/">&lt;h2 id=&quot;目录&quot;&gt;目录&lt;/h2&gt;

&lt;h3 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;/rust/webassembly/2019/07/07/rust-和-WebAssembly/&quot;&gt;1. 简介&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;2-为什么是-rust-和-webassembly&quot;&gt;&lt;a href=&quot;/rust/webassembly/2019/07/08/为什么是Rust和WebAssembly/&quot;&gt;2. 为什么是 Rust 和 WebAssembly&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;3-什么是-webassembly&quot;&gt;&lt;a href=&quot;/rust/webassembly/2019/07/09/什么是WebAssembly/&quot;&gt;3. 什么是 WebAssembly&lt;/a&gt;&lt;/h3&gt;

&lt;h3 id=&quot;4-教程康威的生命游戏&quot;&gt;&lt;a href=&quot;/rust/webassembly/2019/07/10/教程-康威的生命游戏/&quot;&gt;4. 教程:康威的生命游戏&lt;/a&gt;&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;/rust/webassembly/2019/07/11/安装WebAssembly/&quot;&gt;安装&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/rust/webassembly/2019/07/12/Hello,World/&quot;&gt;Hello,World!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/rust/webassembly/2019/07/13/康威生命游戏规则/&quot;&gt;康威生命游戏规则&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/rust/webassembly/2019/08/18/实现康威生命游戏/&quot;&gt;实现康威生命游戏&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;测试康威生命游戏&lt;/li&gt;
  &lt;li&gt;Debugging&lt;/li&gt;
  &lt;li&gt;增加交互性&lt;/li&gt;
  &lt;li&gt;Time Profiling&lt;/li&gt;
  &lt;li&gt;缩小 .wasm 的大小&lt;/li&gt;
  &lt;li&gt;发布到 npm&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;5-参考&quot;&gt;5. 参考&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;你应该知道的 Crates&lt;/li&gt;
  &lt;li&gt;你应该知道的 Tools&lt;/li&gt;
  &lt;li&gt;项目模板&lt;/li&gt;
  &lt;li&gt;Debugging&lt;/li&gt;
  &lt;li&gt;Time Profiling&lt;/li&gt;
  &lt;li&gt;缩小的 .wasm 的大小&lt;/li&gt;
  &lt;li&gt;与 JavaScript 交互&lt;/li&gt;
  &lt;li&gt;使用 WebAssembly 可以使用哪些 Crates 进行现成的 Work&lt;/li&gt;
  &lt;li&gt;如何将 webAssembly 支持添加到通用包&lt;/li&gt;
  &lt;li&gt;将 Rust 和 WebAssembly 部署到生产环境中&lt;/li&gt;
&lt;/ol&gt;</content><author><name>lkighy</name></author><category term="rust" /><category term="WebAssembly" /><category term="翻译" /><category term="目录" /><summary type="html">目录 1. 简介 2. 为什么是 Rust 和 WebAssembly 3. 什么是 WebAssembly 4. 教程:康威的生命游戏 安装 Hello,World! 康威生命游戏规则 实现康威生命游戏 测试康威生命游戏 Debugging 增加交互性 Time Profiling 缩小 .wasm 的大小 发布到 npm 5. 参考 你应该知道的 Crates 你应该知道的 Tools 项目模板 Debugging Time Profiling 缩小的 .wasm 的大小 与 JavaScript 交互 使用 WebAssembly 可以使用哪些 Crates 进行现成的 Work 如何将 webAssembly 支持添加到通用包 将 Rust 和 WebAssembly 部署到生产环境中</summary></entry><entry><title type="html">配置 webpack</title><link href="http://localhost:4000/web/webpack/2019/08/21/%E9%85%8D%E7%BD%AEwebpack/" rel="alternate" type="text/html" title="配置 webpack" /><published>2019-08-21T00:00:00-07:00</published><updated>2019-08-21T00:00:00-07:00</updated><id>http://localhost:4000/web/webpack/2019/08/21/%E9%85%8D%E7%BD%AEwebpack</id><content type="html" xml:base="http://localhost:4000/web/webpack/2019/08/21/%E9%85%8D%E7%BD%AEwebpack/">&lt;h2 id=&quot;初始化项目&quot;&gt;初始化项目&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;搭建环境&quot;&gt;搭建环境&lt;/h2&gt;

&lt;h3 id=&quot;安装-webpack&quot;&gt;安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;// 
npm i webpack --save
// 开发版本
npm i webpack --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;安装-webpack-dev-server&quot;&gt;安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;npm i webpack-dev-server --save
npm i webpack-cli --save

// 可选安装
npm i html-webpack-plugin --save
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;创建配置文件&quot;&gt;创建配置文件&lt;/h3&gt;

&lt;p&gt;在项目根目录下创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; 文件夹,在 &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; 文件夹下创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt; 文件和 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 文件. &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt; 文件为打包入口文件.&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 为页面入口文件.&lt;/p&gt;

&lt;p&gt;在项目根目录下创建 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt; 文件,这是 webpack 的配置文件.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// html-webpack-plugin 组件为可选导入,导入这个组件,可以不需要再index.html 文件中再导入 main.js 文件,webpack 会自动生成打包进文件中,需要 npm i html-webpack-plugin --save 命令进行安装&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;htmlWebpackPlugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;html-webpack-plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 设置入口文件&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./src/main.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 设置输出文件&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./dist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bundle.js&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 配置插件&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 创建刚刚导入的插件&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;htmlWebpackPlugin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 模板文件&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./src/index.html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// 输出文件&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;index.html&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;打开根目录下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 文件, 再 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;script&quot;&lt;/code&gt; 中添加:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;webpack-dev-server&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;中的部分选项&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;--open&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;默认启动时打开浏览器&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;--hot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;热更新&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;--post&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;设置端口为&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;--contentBase&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;设置浏览器默认打开&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;目录&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;如果没有&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;使用&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;html-webpack-plugin&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;选项则可以设置这个选项&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webpack-dev-server --open --hot&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下面在 &lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt; 写入内容,测试是否成功.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.html&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;zh-CN&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1.0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Webpack&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main.js&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myHeading&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'h1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;myHeading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Hello world!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在项目根目录下,输入一下命令运行:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认打开浏览器,页面将显示如下内容:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/2019-08-21-webpack-hello-world.png&quot; alt=&quot;hello,world&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;原本学习时在 学习 vue 时后学习的 webpack, 结果在上手了 vue-cli,之一段时间,就忘了如何安装了配置,于是这里重新去学习和配置了一下.&lt;/p&gt;

&lt;p&gt;本以为 webpack 时必须要在全局安装一遍,然后再项目中在安装一遍,所以使用了虚拟机下的 ubuntu 系统再此配置一次,试试能再全局安装 webpack 时能否使用.而这篇教程也证实确实不需要全局安装.&lt;/p&gt;

&lt;p&gt;所以,这里建议:&lt;strong&gt;能够在项目中安装的包,就别安装在全局,会可能因为包冲突而导致各种莫名奇妙的错误!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本篇博客在某些地方的描述还有些不恰当,还望指出.&lt;/p&gt;</content><author><name>lkighy</name></author><category term="webpack" /><summary type="html">初始化项目 npm init 搭建环境 安装 webpack // npm i webpack --save // 开发版本 npm i webpack --save-dev 安装 webpack-dev-server npm i webpack-dev-server --save npm i webpack-cli --save // 可选安装 npm i html-webpack-plugin --save 创建配置文件 在项目根目录下创建 src 文件夹,在 src 文件夹下创建 main.js 文件和 index.html 文件. main.js 文件为打包入口文件.index.html 为页面入口文件. 在项目根目录下创建 webpack.config.js 文件,这是 webpack 的配置文件. const path = require(&quot;path&quot;) // html-webpack-plugin 组件为可选导入,导入这个组件,可以不需要再index.html 文件中再导入 main.js 文件,webpack 会自动生成打包进文件中,需要 npm i html-webpack-plugin --save 命令进行安装 const htmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;) module.exports = { // 设置入口文件 entry: path.join(__dirname, &quot;./src/main.js&quot;), // 设置输出文件 output: { path: path.join(__dirname, &quot;./dist&quot;), filename: &quot;bundle.js&quot; }, // 配置插件 plugins: [ // 创建刚刚导入的插件 new htmlWebpackPlugin({ // 模板文件 template: path.json(__dirname, &quot;./src/index.html&quot;), // 输出文件 filename: &quot;index.html&quot; }) ] } 打开根目录下的 package.json 文件, 再 &quot;script&quot; 中添加: { // ... &quot;script&quot;: { // webpack-dev-server 中的部分选项 // --open 默认启动时打开浏览器, // --hot 热更新 // --post 3000 设置端口为 3000 // --contentBase src 设置浏览器默认打开 src 目录 如果没有 使用 html-webpack-plugin 选项则可以设置这个选项 &quot;dev&quot;: &quot;webpack-dev-server --open --hot&quot; } // ... } 下面在 index.html 和 main.js 写入内容,测试是否成功. index.html &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&quot;zh-CN&quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;UTF-8&quot;&amp;gt; &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt; &amp;lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&amp;gt; &amp;lt;title&amp;gt;Webpack&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;&amp;lt;/h1&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; main.js let myHeading = document.querySelector('h1'); myHeading.textContent = 'Hello world!'; 在项目根目录下,输入一下命令运行: npm run dev 默认打开浏览器,页面将显示如下内容: 总结 原本学习时在 学习 vue 时后学习的 webpack, 结果在上手了 vue-cli,之一段时间,就忘了如何安装了配置,于是这里重新去学习和配置了一下. 本以为 webpack 时必须要在全局安装一遍,然后再项目中在安装一遍,所以使用了虚拟机下的 ubuntu 系统再此配置一次,试试能再全局安装 webpack 时能否使用.而这篇教程也证实确实不需要全局安装. 所以,这里建议:能够在项目中安装的包,就别安装在全局,会可能因为包冲突而导致各种莫名奇妙的错误! 本篇博客在某些地方的描述还有些不恰当,还望指出.</summary></entry><entry><title type="html">实现康威生命游戏</title><link href="http://localhost:4000/rust/webassembly/2019/08/18/%E5%AE%9E%E7%8E%B0%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/" rel="alternate" type="text/html" title="实现康威生命游戏" /><published>2019-08-18T00:00:00-07:00</published><updated>2019-08-18T00:00:00-07:00</updated><id>http://localhost:4000/rust/webassembly/2019/08/18/%E5%AE%9E%E7%8E%B0%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F</id><content type="html" xml:base="http://localhost:4000/rust/webassembly/2019/08/18/%E5%AE%9E%E7%8E%B0%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/">&lt;h2 id=&quot;设计&quot;&gt;设计&lt;/h2&gt;

&lt;p&gt;在我们深入之前,我们有一些设计需要考虑.&lt;/p&gt;

&lt;h3 id=&quot;无限的-universe&quot;&gt;无限的 universe&lt;/h3&gt;

&lt;p&gt;生命游戏是在无限的 universe 中进行的,但我们没有无限的内存和计算能力.解决这个相当烦人的限制通常由一下三种选择:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;跟踪 universe 的哪个子集发生了有趣的事情,并根据需要扩展此区域.在最坏的情况下,这种扩展是无限制的,实现将变得越来越慢,,最终耗尽内存.&lt;/li&gt;
  &lt;li&gt;创建固定大小的 universe ,其中边缘上的单元格比中间的单元格具有更少的邻居.这种方法缺点是达到 universe 尽头的无限的,如同滑翔机这样的到达了 universe 尽头,都会被消灭.&lt;/li&gt;
  &lt;li&gt;创建一个固定大小固定周期的 universe ,其中边缘上的单元格连接着 universe 另一侧的单元格,因为连接临近的 universe ,滑翔机可以永远运行下去.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我们将实现第三种选择.&lt;/p&gt;

&lt;h3 id=&quot;连接-rust-和-javascript&quot;&gt;连接 Rust 和 JavaScript&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;⚡即便离开了本教程,这也是最重要的概念之一!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JavaScript 中的垃圾回收器(其中分配了 &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt; 和 DOM 节点) 与 WebAssembly 的线性内存空间不同,后者存在于 Rust 值所在的空间.WebAssembly 目前无法直接访问垃圾回收器(截至 2018年 4月,预计会随着 &lt;a href=&quot;https://github.com/WebAssembly/webidl-bindings/blob/master/proposals/webidl-bindings/Explainer.md&quot;&gt;“webIDL bindings” 提案&lt;/a&gt;而改变).另一方面,JavaScript 可以读取和写入 WebAssembly 线性内存空间,但只能作为 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; 的标量值(&lt;code class=&quot;highlighter-rouge&quot;&gt;u8&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;i32&lt;/code&gt;, f64` 等等…).WebAssembly 函数也接受并返回标量值.这些是构成所有 WebAssembly 和 JavaScript 通信的构建块.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm_bindgen&lt;/code&gt; 定义了如何跨越此边界适用符合构建的共同协议.它涉及装箱 Rust 结构,将指针包装在 JavaScript 类中或从 Rust 索引到 JavaScript 对象表中以便使用.&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm_bindgen&lt;/code&gt; 非常方便,但它不需要我们考虑数据表示,以及跨越此边界传递的值和结构.相反,您可以将其视为实现所有界面设计的工具.&lt;/p&gt;

&lt;p&gt;在设计 webAssembly 和 JavaScript 之间的接口时,我们希望针对一下属性进行优化:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;复制进入 WebAssembly 线性内存的将是最小化的.&lt;/strong&gt;不必要的副本会带来不必要的开销.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;最小序列化和反序列化.&lt;/strong&gt;与副本类似,序列化和反序列化也会产生开销,并且通常会造成复制.如果我们可以将不透明句柄传递给数据结构 - 而不是在一侧将其序列化,再复制到 WebAssembly 线性内存中的某个已知位置,并再另一侧进行反序列化 - 我们通常可以减少大量开销.&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm_bindgen&lt;/code&gt; 帮助我们定义可处理 JavaScript 对象或将 Rust 结构装入不透明句柄.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;通常的经验时,良好的 JavaScript ↔ WebAssembly 接口设计通常时间大型的,长期存在的数据结构实现为驻留在 WebAssembly 的 Rust 类型,并将其作为不透明句柄暴露给 JavaScript .JavaScript 调用导出的 WebAssembly 函数,这些函数接受这些不透明句柄,转换数据,执行繁重的计算,查询数据,最终返回一个小的可复制的结果.通过返回计算的小小的结果,我们避免在 JavaScript 垃圾回收器 和 WebAssembly 线性内存之间来回复制/序列化所有内容.&lt;/p&gt;

&lt;h3 id=&quot;在我们的生命游戏中连接-rust-和-javascript&quot;&gt;在我们的生命游戏中连接 Rust 和 JavaScript&lt;/h3&gt;

&lt;p&gt;首先我们列举一些要避免的危险,我们不希望再每个 tick 上将整个 universe 复制到 WebAssembly 线性内存中.我们不希望为 universe 中每个单元分配对象,也不想强制进行跨边界调用来读写每个单元.&lt;/p&gt;

&lt;p&gt;这会给我们留下什么?我们可以将 universe 表示为一个平面数组,它存在于 WebAssembly 线性内存中,每个单元都有一个字节.  0 是死细胞,1 是活细胞.&lt;/p&gt;

&lt;p&gt;这是 4 × 4  universe 再内存中的样子:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://rustwasm.github.io/book/images/game-of-life/universe.png&quot; alt=&quot;universe&quot; /&gt;&lt;/p&gt;

&lt;p&gt;要在  universe 中的给定行和列中查找单元格的数组索引,我们可以使用一下公式:&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;index(row, column, universe) = row * width(universe) + column
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们有几种方法可以将 universe 的单元格暴露给 JavaScript.首先,我们将 &lt;code class=&quot;highlighter-rouge&quot;&gt;Universe&lt;/code&gt; 实现 &lt;code class=&quot;highlighter-rouge&quot;&gt;std::fmt::Display&lt;/code&gt;,我们可以使用它来生成呈现为文本字符的单元格 Rust String.然后将此 Rust String 从 WebAssembly 先行内存复制到 JavaScript 的垃圾回收器中的 JavaScript String 中,然后通过 设置 HTML textContent 显示.再本章的后面我们将改进这个实现,以避免再队之间复制 universe 的单元格渲染到 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;(画布).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;另一个可行的设计代替方案是 Rust 返回每一个更改状态后的细胞的单元格刘表,而不是整个 universe 暴露给 JavScript.这样,JavaScript 在渲染时不需要遍历整个 universe, 只需要相关的子集.折中之处在于,这种基于 delta-based 设计更难实现.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;rust实现&quot;&gt;Rust实现&lt;/h2&gt;

&lt;p&gt;在上一章中,我们克隆了一个初始项目模板.我们现在将修改该项目模板.&lt;/p&gt;

&lt;p&gt;让我们首先从 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/ssrc/lib.rs&lt;/code&gt; 中删除 &lt;code class=&quot;highlighter-rouge&quot;&gt;alert&lt;/code&gt; 模块和 &lt;code class=&quot;highlighter-rouge&quot;&gt;greet&lt;/code&gt; 函数,然后定义单元格的类型替换它们:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wasm_bindgen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[repr(u8)]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[derive(Clone,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Copy,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Debug,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;PartialEq,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Eq)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Dead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Alive&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重要的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;#[repr(u8)]&lt;/code&gt;,和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dead&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Alive&lt;/code&gt;.&lt;code class=&quot;highlighter-rouge&quot;&gt;#[repr(u8)]&lt;/code&gt; 将每个单元表示为一个字节; &lt;code class=&quot;highlighter-rouge&quot;&gt;Dead&lt;/code&gt; 表示死细胞,变量为 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;; &lt;code class=&quot;highlighter-rouge&quot;&gt;Alive&lt;/code&gt; 表示活细胞,变量为 ‘1’, 这样我们就可以通过相加轻易计算出单元格活着的邻居.&lt;/p&gt;

&lt;p&gt;接下来让我们定义 universe,universe 具有宽度和高度,以及 &lt;code class=&quot;highlighter-rouge&quot;&gt;width * height&lt;/code&gt; 长度的 vector.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wasm_bindgen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要访问给定行和列的 cells,我们将行和列转换为 cells vector 索引,如前所述:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了计算细胞的下一状态,我们需要计算邻居数量是多少.让我们编写一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;live_neighbor_count&lt;/code&gt; 方法来做到这一点!&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;live_neighbor_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.height&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_col&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.width&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cloned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor_row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor_col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta_col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;neighbor_row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neighbor_col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;live_neighobor_count&lt;/code&gt; 方法使用 deltas 取余的方法对 universe 边缘进行特殊包装来避免使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;. 当 delta &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; 时,我们添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;self.height - 1&lt;/code&gt; 并使用取余来完成这件事,而不是使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;-1&lt;/code&gt; . &lt;code class=&quot;highlighter-rouge&quot;&gt;row&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;column&lt;/code&gt; 可以为零,如果我们试图让为 &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; 的它们减去 &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; ,则会出现无符号整数下溢.&lt;/p&gt;

&lt;p&gt;现在我们拥有了从当前一代计算下一代所需要的一切!现在将游戏的每一个规则转换为 &lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt; 表达式上的条件.另外,我们希望 javaScript 通过 tick 控制发生的时间,因此我们会将此方法放在 &lt;code class=&quot;highlighter-rouge&quot;&gt;#[wasm_bindgen]&lt;/code&gt; 块中,这样它就会暴露给 JavaScript.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// Public methods, exported to JavaScript.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[wasm_bindgen]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.cells&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.height&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.width&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;live_neighbors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.live_neighbor_count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;live_neighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// Rule 1: Any live cell with fewer than two live neighbours&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// dies, as if caused by underpopulation.&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// Rule 2: Any live cell with two or three live neighbours&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// lives on to the next generation.&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// Rule 3: Any live cell with more than three live&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// neighbours dies, as if by overpopulation.&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// Rule 4: Any dead cell with exactly three live neighbours&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// becomes a live cell, as if by reproduction.&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Alive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// All other cells remain in the same state.&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otherwise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next_cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.cells&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;到目前为止, Universe 的状态被表现为 cells vector.为了让其更易读,让我们实现一个基本的文本渲染器(text renderer).我们的想法时将 Universe 逐行写为文本,对于每个活细胞,我们将打印 Unicode 字符 &lt;code class=&quot;highlighter-rouge&quot;&gt;◼&lt;/code&gt;(“黑色中等方块”).对于死细胞,我们将打印&lt;code class=&quot;highlighter-rouge&quot;&gt;◻&lt;/code&gt;(“白色中等方块”).&lt;/p&gt;

&lt;p&gt;通过实现 Rust 标准库中 &lt;code class=&quot;highlighter-rouge&quot;&gt;Display&lt;/code&gt; 的 trait, 我们可以添加一种以面向用户的方式的格式化结构的方法.这也会自动给我们一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;to_string&lt;/code&gt; 方法.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Display&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.cells&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.chunks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.width&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dead&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'◻'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'◼'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;write!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;write!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(())&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后,我们定义一个构造函数,用一个有趣的活细胞死细胞模式初始化宇宙,以及一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; 方法:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// Public methods, exported to JavaScript.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[wasm_bindgen]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nn&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Alive&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nn&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dead&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有了这个,我们 Rust 实现的生命游戏就完成一半了!&lt;/p&gt;

&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-pack&lt;/code&gt; 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life&lt;/code&gt; 目录中运行将其重新编译为 WebAssembly.&lt;/p&gt;

&lt;h2 id=&quot;使用-javascript-渲染&quot;&gt;使用 JavaScript 渲染&lt;/h2&gt;

&lt;p&gt;首先,让我们在 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www/index.html&lt;/code&gt; 中添加一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 元素来渲染 universe,就添加在 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签上方:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;pre&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;game-of-life-canvas&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/pre&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./bootstrap.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此外,我们希望 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 居中在网页的中间.我们可以使用 CSS 弹性盒子来完成这项任务. 在 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www/index.html&lt;/code&gt; 中 &lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;标签添加以下代码:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;flex-direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;justify-content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www/index.js&lt;/code&gt; 的顶部,让我们将导入的 &lt;code class=&quot;highlighter-rouge&quot;&gt;greet&lt;/code&gt; 方法替换为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Universe&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wasm-game-of-life&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外,让我们为刚刚添加的 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 元素实例化一个新的 Universe:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;game-of-life-canvas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;universe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Universe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;JavaScript 运行在一个 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;requestAnimationFrame&lt;/code&gt; 循环中&lt;/a&gt;.在每次迭代中,他将当前 Universe 绘制到 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; ,然后调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Universe::tick&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderLoop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;universe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;universe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要开始渲染过程前,我们还要为渲染循环的第一次迭代进行初始化调用:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;确保您的开发服务器正在运行(在 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www&lt;/code&gt; 目录下运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run start&lt;/code&gt;),访问 &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt; 页面应该是这样的:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://rustwasm.github.io/book/images/game-of-life/initial-game-of-life-pre.png&quot; alt=&quot;带有文本渲染的Game of Life实现的屏幕截图&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;直接从内存渲染到画布&quot;&gt;直接从内存渲染到画布&lt;/h2&gt;

&lt;p&gt;在 Rust 中生成(并分配)一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;,然后让 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; 将它转换为一个有效的 JavaScript 字符串,就会产生不必要的 universe cells 副本.由于 JavaScript 代码已经知道了 universe 的宽度和高度,因此我们将修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;render&lt;/code&gt; 方法以返回 cells 数组开头的指针.&lt;/p&gt;

&lt;p&gt;此外,我们将使用 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API&quot;&gt;Canvas API&lt;/a&gt;来代替 Unicode 文本,而不是渲染为 Unicode 文本,我们将在本教程剩余的部分使用此设计.&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www/index.html&lt;/code&gt; 里,让我们用 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 取代之前添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 来呈现内容(它也应该在我们加载 JavaScript 的脚本前.)&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;canvas&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;game-of-life-canvas&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/canvas&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./bootstrap.js'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了从 Rust 实现中获得必要的信息,我们需要为 universe 的 width, height 和 指向 cell 数组的指针添加更多的 getter 函数.这些都将暴露给 JavaScript.将这些添加到 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/src/lib.rs&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;/// Public methods, exported to JavaScript.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[wasm_bindgen]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Universe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.width&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;u32&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.height&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.cells&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;接下来,在 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www/index.js&lt;/code&gt; 中,让我们从 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life&lt;/code&gt; 导入 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cell&lt;/code&gt;,并定义一些常量,我们将在 渲染到画布时使用这些常量:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Universe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cell&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wasm-game-of-life&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CELL_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// px&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GRID_COLOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#CCCCCC&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DEAD_COLOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#FFFFFF&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ALIVE_COLOR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#000000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;现在,让我们重写其余的 JavaScript 代码.不再写入给 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; 写入 &lt;code class=&quot;highlighter-rouge&quot;&gt;textContent&lt;/code&gt; 而是绘制到 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Construct the universe, and get its width and height.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;universe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Universe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;universe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;universe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Give the canvas room for all of our cells and a 1px border&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// around each of them.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;game-of-life-canvas&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CELL_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CELL_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2d'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;renderLoop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;universe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;drawGrid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;drawCells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了在 cells 之间绘制网格,我们绘制一组等间距的水平线,和一组等间距的垂直线.这些横纵线交错形成网格.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drawGrid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strokeStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GRID_COLOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Vertical lines.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moveTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CELL_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lineTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CELL_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CELL_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Horizontal lines.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moveTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                           &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CELL_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lineTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CELL_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CELL_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;memory&lt;/code&gt; 直接访问 WebAssembly 的线性内存, &lt;code class=&quot;highlighter-rouge&quot;&gt;memory&lt;/code&gt; 是直接在原始模块 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm_game_of_life_bg&lt;/code&gt; 中定义的.为了绘制 cells,我们得到一个指向 universe cells 的指针,构建一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Uint8Array&lt;/code&gt; 覆盖 cells 缓冲区,在每个细胞上迭代,并根据细胞是死的还是活的分别绘制一个白色或黑色矩形.通过使用指针和 &lt;code class=&quot;highlighter-rouge&quot;&gt;Uint8Array&lt;/code&gt; ,我们避免在每个 tick 上跨边界复制 cells.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Import the WebAssembly memory at the top of the file.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wasm-game-of-life/wasm_game_of_life_bg&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;drawCells&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cellsPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;universe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cells&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cellsPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beginPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;col&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fillStyle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Cell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Dead&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DEAD_COLOR&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ALIVE_COLOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fillRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;col&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CELL_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CELL_SIZE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;CELL_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;CELL_SIZE&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stroke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;要开始渲染过程,我们将使用与上面相同的代码来开始渲染循环的第一次迭代:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;drawGrid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;drawCells&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;requestAnimationFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;renderLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意, 在调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;requestAnimationFrame(renderLoop)&lt;/code&gt; 之前调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;drawGrid()&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;drawCells()&lt;/code&gt;.我们这样做的原因是在我们进行修改之前绘制 universe 的初始状态.如果我们只是简单的调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;requestAnimationFrame(renderLoop)&lt;/code&gt; ,我们最终会得到这样一种情况,第一正被绘制实际上实在第一次调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;universe.tick()&lt;/code&gt; 之后,这些细胞将呈现生命周期的第二个 &lt;code class=&quot;highlighter-rouge&quot;&gt;tick&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;它起作用了&quot;&gt;它起作用了!&lt;/h2&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life&lt;/code&gt; 目录通过 root 权限运行此命令来重建 WebAssembly 和绑定粘合剂.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;wasm-pack build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;确保您的开发服务器正在运行.如果不是请从 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www&lt;/code&gt; 目录中再次启动它:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果你刷新 [http://localhost:8080/] 您应该会收到一个令人兴奋的 life 展示!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://rustwasm.github.io/book/images/game-of-life/initial-game-of-life.png&quot; alt=&quot;hello wasm-pack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除此之外,还有一个非常简洁的名为 &lt;a href=&quot;https://en.wikipedia.org/wiki/Hashlife&quot;&gt;Hashlife&lt;/a&gt; 的算法来实现生命游戏.它使用积极的 memoizing,并且实际上可以以指数的速度更快的计算后代!鉴于此,您可能想知道为什么我们在本教程中年没有使用 heshlife 实现.因为它超出了本文的范围,我们专注于实现 Rust 和 WebAssembly 的结合,但我们强烈推荐您自己去了解 hashlife!&lt;/p&gt;

&lt;h2 id=&quot;练习&quot;&gt;练习&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;用单个太空飞船初始化 universe.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不是硬编码进行初始化 universe,而是产生一个随机的,每个细胞有一半存活机会的 universe.
  &lt;em&gt;提示: 使用 &lt;a href=&quot;https://crates.io/crates/js-sys&quot;&gt;js-sys crate&lt;/a&gt; 导入 Math.random JavaScript 函数&lt;/em&gt;&lt;/p&gt;

    &lt;details&gt;

  &lt;summary&gt;答案&lt;/summary&gt;

  &lt;p&gt;首先,将 `js-sys` 依赖添加到 `wasm-game-of-life/Cargo.toml`:&lt;/p&gt;

  ```toml
  # ...
  [dependencies]
  js-sys = &quot;0.3&quot;
  # ...
  ```

  &lt;p&gt;然后,使用 &lt;code&gt;js_sys::Math::random&lt;/code&gt; 函数进行掷硬币:&lt;/p&gt;

  ```rust
  extern crate js_sys;

  // ...

  if js_sys::Math::random() &amp;lt; 0.5 {
      // Alive...
  } else {
      // Dead...
  }
  ```

  &amp;lt;/pre&amp;gt;

  &lt;/details&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用字节表示每个单元格可以轻松地对单元格进行迭代,但它是以浪费内存的代价而来的.每个字节是 8 为,但我们只需要一个比特来表示每个细胞是死的还是活的.重新调整数据表示,以便每个单元仅使用一个比特的空间.&lt;/p&gt;

    &lt;details&gt;

  &lt;summary&gt;答案&lt;/summary&gt;

  在 Rust 中, 你可以使用 [`fuxedbutset` crate 的 `FixedBitSet` 类型](https://crates.io/crates/fixedbitset) 来表示 cells 而不是使用 `Vec&lt;Cell&gt;`:

  ```rust
  // Make sure you also added the dependency to Cargo.toml!
  extern crate fixedbitset;
  use fixedbitset::FixedBitSet;

  // ...

  #[wasm_bindgen]
  pub struct Universe {
      width: u32,
      height: u32,
      cells: FixedBitSet,
  }
  ```

  可以通过以下方式调整 Universe 构造函数:

  ```rust
  pub fn new() -&amp;gt; Universe {
      let width = 64;
      let height = 64;

      let size = (width * height) as usize;
      let mut cells = FixedBitSet::with_capacity(size);

      for i in 0..size {
          cells.set(i, i % 2 == 0 || i % 7 == 0);
      }

      Universe {
          width,
          height,
          cells,
      }
  }
  ```

  要更新 Universe 的下一刻度中的 cells,我们使用 `FixedBitSet` 的 set 方法:

  ```rust
  next.set(idx, match (cell, live_neighbors) {
      (true, x) if x &amp;lt; 2 =&amp;gt; false,
      (true, 2) | (true, 3) =&amp;gt; true,
      (true, x) if x &amp;gt; 3 =&amp;gt; false,
      (false, 3) =&amp;gt; true,
      (otherwise, _) =&amp;gt; otherwise
  });
  ```

  要将指向开头的执政传递给 JavaScript,可以将 `FixedBitSet` 转换为 slice,然后将 slice 转换为指针:

  ```rust
  #[wasm_bindgen]
  impl Universe {
      // ...

      pub fn cells(&amp;amp;self) -&amp;gt; *const u32 {
          self.cells.as_slice().as_ptr()
      }
  }
  ```

  在 JavaScript 中,从 wasm 内存构造 `Uint8Array` 与之前相同,只是数组的长度不再是 `width * height`,而是 `width * height / 8` ,因为我们每个细胞只有一比特而不是一个字节:

  ```js
  const cells = new Uint8Array(memory.buffer, cellsPtr, width * height / 8);
  ```

  给定索引和 Uint8Array`,您用以下函数确定 n &lt;sup&gt;th&lt;/sup&gt; 比特是否设置:

  ```js
  const bitIsSet = (n, arr) =&amp;gt; {
  const byte = Math.floor(n / 8);
  const mask = 1 &amp;lt;&amp;lt; (n % 8);
  return (arr[byte] &amp;amp; mask) === mask;
  };
  ```

  有鉴于此,新版本的 drawCells 如下所示:

  ```js
  const drawCells = () =&amp;gt; {
  const cellsPtr = universe.cells();

  // This is updated!
  const cells = new Uint8Array(memory.buffer, cellsPtr, width * height / 8);

  ctx.beginPath();

  for (let row = 0; row &amp;lt; height; row++) {
      for (let col = 0; col &amp;lt; width; col++) {
      const idx = getIndex(row, col);

      // This is updated!
      ctx.fillStyle = bitIsSet(idx, cells)
          ? ALIVE_COLOR
          : DEAD_COLOR;

      ctx.fillRect(
          col * (CELL_SIZE + 1) + 1,
          row * (CELL_SIZE + 1) + 1,
          CELL_SIZE,
          CELL_SIZE
      );
      }
  }

  ctx.stroke();
  };
  ```

&lt;/Cell&gt;&lt;/details&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;/details&amp;gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/rust/webassembly/2019/08/22/WebAssembly之书目录&quot;&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;下一篇:&lt;a href=&quot;javascript:;&quot;&gt;&lt;strong&gt;测试康威生命游戏&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;上一篇:&lt;a href=&quot;/rust/webassembly/2019/07/13/康威生命游戏规则/&quot;&gt;&lt;strong&gt;康威生命游戏规则&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;via: &lt;a href=&quot;https://rustwasm.github.io/book/game-of-life/implementing.html&quot;&gt;https://rustwasm.github.io/book/game-of-life/implementing.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;译者: lkighy&lt;/li&gt;
  &lt;li&gt;校对: -&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lkighy</name></author><category term="rust" /><category term="WebAssembly" /><category term="翻译" /><summary type="html">设计 在我们深入之前,我们有一些设计需要考虑. 无限的 universe 生命游戏是在无限的 universe 中进行的,但我们没有无限的内存和计算能力.解决这个相当烦人的限制通常由一下三种选择: 跟踪 universe 的哪个子集发生了有趣的事情,并根据需要扩展此区域.在最坏的情况下,这种扩展是无限制的,实现将变得越来越慢,,最终耗尽内存. 创建固定大小的 universe ,其中边缘上的单元格比中间的单元格具有更少的邻居.这种方法缺点是达到 universe 尽头的无限的,如同滑翔机这样的到达了 universe 尽头,都会被消灭. 创建一个固定大小固定周期的 universe ,其中边缘上的单元格连接着 universe 另一侧的单元格,因为连接临近的 universe ,滑翔机可以永远运行下去. 我们将实现第三种选择. 连接 Rust 和 JavaScript ⚡即便离开了本教程,这也是最重要的概念之一! JavaScript 中的垃圾回收器(其中分配了 object, array 和 DOM 节点) 与 WebAssembly 的线性内存空间不同,后者存在于 Rust 值所在的空间.WebAssembly 目前无法直接访问垃圾回收器(截至 2018年 4月,预计会随着 “webIDL bindings” 提案而改变).另一方面,JavaScript 可以读取和写入 WebAssembly 线性内存空间,但只能作为 ArrayBuffer 的标量值(u8, i32, f64` 等等…).WebAssembly 函数也接受并返回标量值.这些是构成所有 WebAssembly 和 JavaScript 通信的构建块. wasm_bindgen 定义了如何跨越此边界适用符合构建的共同协议.它涉及装箱 Rust 结构,将指针包装在 JavaScript 类中或从 Rust 索引到 JavaScript 对象表中以便使用.wasm_bindgen 非常方便,但它不需要我们考虑数据表示,以及跨越此边界传递的值和结构.相反,您可以将其视为实现所有界面设计的工具. 在设计 webAssembly 和 JavaScript 之间的接口时,我们希望针对一下属性进行优化: 复制进入 WebAssembly 线性内存的将是最小化的.不必要的副本会带来不必要的开销. 最小序列化和反序列化.与副本类似,序列化和反序列化也会产生开销,并且通常会造成复制.如果我们可以将不透明句柄传递给数据结构 - 而不是在一侧将其序列化,再复制到 WebAssembly 线性内存中的某个已知位置,并再另一侧进行反序列化 - 我们通常可以减少大量开销.wasm_bindgen 帮助我们定义可处理 JavaScript 对象或将 Rust 结构装入不透明句柄. 通常的经验时,良好的 JavaScript ↔ WebAssembly 接口设计通常时间大型的,长期存在的数据结构实现为驻留在 WebAssembly 的 Rust 类型,并将其作为不透明句柄暴露给 JavaScript .JavaScript 调用导出的 WebAssembly 函数,这些函数接受这些不透明句柄,转换数据,执行繁重的计算,查询数据,最终返回一个小的可复制的结果.通过返回计算的小小的结果,我们避免在 JavaScript 垃圾回收器 和 WebAssembly 线性内存之间来回复制/序列化所有内容. 在我们的生命游戏中连接 Rust 和 JavaScript 首先我们列举一些要避免的危险,我们不希望再每个 tick 上将整个 universe 复制到 WebAssembly 线性内存中.我们不希望为 universe 中每个单元分配对象,也不想强制进行跨边界调用来读写每个单元. 这会给我们留下什么?我们可以将 universe 表示为一个平面数组,它存在于 WebAssembly 线性内存中,每个单元都有一个字节. 0 是死细胞,1 是活细胞. 这是 4 × 4 universe 再内存中的样子: 要在 universe 中的给定行和列中查找单元格的数组索引,我们可以使用一下公式: index(row, column, universe) = row * width(universe) + column 我们有几种方法可以将 universe 的单元格暴露给 JavaScript.首先,我们将 Universe 实现 std::fmt::Display,我们可以使用它来生成呈现为文本字符的单元格 Rust String.然后将此 Rust String 从 WebAssembly 先行内存复制到 JavaScript 的垃圾回收器中的 JavaScript String 中,然后通过 设置 HTML textContent 显示.再本章的后面我们将改进这个实现,以避免再队之间复制 universe 的单元格渲染到 &amp;lt;canvas&amp;gt;(画布). 另一个可行的设计代替方案是 Rust 返回每一个更改状态后的细胞的单元格刘表,而不是整个 universe 暴露给 JavScript.这样,JavaScript 在渲染时不需要遍历整个 universe, 只需要相关的子集.折中之处在于,这种基于 delta-based 设计更难实现. Rust实现 在上一章中,我们克隆了一个初始项目模板.我们现在将修改该项目模板. 让我们首先从 wasm-game-of-life/ssrc/lib.rs 中删除 alert 模块和 greet 函数,然后定义单元格的类型替换它们: #[wasm_bindgen] #[repr(u8)] #[derive(Clone, Copy, Debug, PartialEq, Eq)] pub enum Cell { Dead = 0, Alive = 1, } 重要的是 #[repr(u8)],和 Dead, Alive.#[repr(u8)] 将每个单元表示为一个字节; Dead 表示死细胞,变量为 0; Alive 表示活细胞,变量为 ‘1’, 这样我们就可以通过相加轻易计算出单元格活着的邻居. 接下来让我们定义 universe,universe 具有宽度和高度,以及 width * height 长度的 vector. #[wasm_bindgen] pub struct Universe { width: u32, height: u32, cells: Vec&amp;lt;Cell&amp;gt;, } 要访问给定行和列的 cells,我们将行和列转换为 cells vector 索引,如前所述: impl Universe { fn get_index(&amp;amp;self, row: u32, column: u32) -&amp;gt; usize { (row * self.width + column) as usize } // ... } 为了计算细胞的下一状态,我们需要计算邻居数量是多少.让我们编写一个 live_neighbor_count 方法来做到这一点! impl Universe { // ... fn live_neighbor_count(&amp;amp;self, row: u32, column: u32) -&amp;gt; u8 { let mut count = 0; for delta_row in [self.height - 1, 0, 1].iter().cloned() { for delta_col in [self.width - 1, 0, 1].iter().cloned() { if delta_row == 0 &amp;amp;&amp;amp; delta_col == 0 { continue; } let neighbor_row = (row + delta_row) % self.height; let neighbor_col = (column + delta_col) % self.width; let idx = self.get_index(neighbor_row, neighbor_col); count += self.cells[idx] as u8; } } count } } live_neighobor_count 方法使用 deltas 取余的方法对 universe 边缘进行特殊包装来避免使用 if. 当 delta -1 时,我们添加 self.height - 1 并使用取余来完成这件事,而不是使用 -1 . row 和 column 可以为零,如果我们试图让为 0 的它们减去 1 ,则会出现无符号整数下溢. 现在我们拥有了从当前一代计算下一代所需要的一切!现在将游戏的每一个规则转换为 match 表达式上的条件.另外,我们希望 javaScript 通过 tick 控制发生的时间,因此我们会将此方法放在 #[wasm_bindgen] 块中,这样它就会暴露给 JavaScript. /// Public methods, exported to JavaScript. #[wasm_bindgen] impl Universe { pub fn tick(&amp;amp;mut self) { let mut next = self.cells.clone(); for row in 0..self.height { for col in 0..self.width { let idx = self.get_index(row, col); let cell = self.cells[idx]; let live_neighbors = self.live_neighbor_count(row, col); let next_cell = match (cell, live_neighbors) { // Rule 1: Any live cell with fewer than two live neighbours // dies, as if caused by underpopulation. (Cell::Alive, x) if x &amp;lt; 2 =&amp;gt; Cell::Dead, // Rule 2: Any live cell with two or three live neighbours // lives on to the next generation. (Cell::Alive, 2) | (Cell::Alive, 3) =&amp;gt; Cell::Alive, // Rule 3: Any live cell with more than three live // neighbours dies, as if by overpopulation. (Cell::Alive, x) if x &amp;gt; 3 =&amp;gt; Cell::Dead, // Rule 4: Any dead cell with exactly three live neighbours // becomes a live cell, as if by reproduction. (Cell::Dead, 3) =&amp;gt; Cell::Alive, // All other cells remain in the same state. (otherwise, _) =&amp;gt; otherwise, }; next[idx] = next_cell; } } self.cells = next; } // ... } 到目前为止, Universe 的状态被表现为 cells vector.为了让其更易读,让我们实现一个基本的文本渲染器(text renderer).我们的想法时将 Universe 逐行写为文本,对于每个活细胞,我们将打印 Unicode 字符 ◼(“黑色中等方块”).对于死细胞,我们将打印◻(“白色中等方块”). 通过实现 Rust 标准库中 Display 的 trait, 我们可以添加一种以面向用户的方式的格式化结构的方法.这也会自动给我们一个 to_string 方法. use std::fmt; impl fmt::Display for Universe { fn fmt(&amp;amp;self, f: &amp;amp;mut fmt::Formatter) -&amp;gt; fmt::Result { for line in self.cells.as_slice().chunks(self.width as usize) { for &amp;amp;cell in line { let symbol = if cell == Cell::Dead { '◻' } else { '◼' }; write!(f, &quot;{}&quot;, symbol)?; } write!(f, &quot;\n&quot;)?; } Ok(()) } } 最后,我们定义一个构造函数,用一个有趣的活细胞死细胞模式初始化宇宙,以及一个 render 方法: /// Public methods, exported to JavaScript. #[wasm_bindgen] impl Universe { // ... pub fn new() -&amp;gt; Universe { let width = 64; let height = 64; let cells = (0..width * height) .map(|i| { if i % 2 == 0 || i % 7 == 0 { Cell::Alive } else { Cell::Dead } }) .collect(); Universe { width, height, cells, } } pub fn render(&amp;amp;self) -&amp;gt; String { self.to_string() } } 有了这个,我们 Rust 实现的生命游戏就完成一半了! 通过 wasm-pack 在 wasm-game-of-life 目录中运行将其重新编译为 WebAssembly. 使用 JavaScript 渲染 首先,让我们在 wasm-game-of-life/www/index.html 中添加一个 &amp;lt;pre&amp;gt; 元素来渲染 universe,就添加在 &amp;lt;script&amp;gt; 标签上方: &amp;lt;body&amp;gt; &amp;lt;pre id=&quot;game-of-life-canvas&quot;&amp;gt;&amp;lt;/pre&amp;gt; &amp;lt;script src=&quot;./bootstrap.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; 此外,我们希望 &amp;lt;pre&amp;gt; 居中在网页的中间.我们可以使用 CSS 弹性盒子来完成这项任务. 在 wasm-game-of-life/www/index.html 中 head标签添加以下代码: &amp;lt;style&amp;gt; body { position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center; } &amp;lt;/style&amp;gt; 在 wasm-game-of-life/www/index.js 的顶部,让我们将导入的 greet 方法替换为 Universe: import { Universe } from &quot;wasm-game-of-life&quot;; 另外,让我们为刚刚添加的 &amp;lt;pre&amp;gt; 元素实例化一个新的 Universe: const pre = document.getElementById(&quot;game-of-life-canvas&quot;); const universe = Universe.new(); JavaScript 运行在一个 requestAnimationFrame 循环中.在每次迭代中,他将当前 Universe 绘制到 &amp;lt;pre&amp;gt; ,然后调用 Universe::tick. const renderLoop = () =&amp;gt; { pre.textContent = universe.render() universe.tick(); requestAnimationFrame(renderLoop); } 要开始渲染过程前,我们还要为渲染循环的第一次迭代进行初始化调用: requestAnimationFrame(renderLoop); 确保您的开发服务器正在运行(在 wasm-game-of-life/www 目录下运行 npm run start),访问 http://localhost:8080/ 页面应该是这样的: 直接从内存渲染到画布 在 Rust 中生成(并分配)一个 String,然后让 wasm-bindgen 将它转换为一个有效的 JavaScript 字符串,就会产生不必要的 universe cells 副本.由于 JavaScript 代码已经知道了 universe 的宽度和高度,因此我们将修改 render 方法以返回 cells 数组开头的指针. 此外,我们将使用 Canvas API来代替 Unicode 文本,而不是渲染为 Unicode 文本,我们将在本教程剩余的部分使用此设计. 在 wasm-game-of-life/www/index.html 里,让我们用 &amp;lt;canvas&amp;gt; 取代之前添加 &amp;lt;pre&amp;gt; 来呈现内容(它也应该在我们加载 JavaScript 的脚本前.) &amp;lt;body&amp;gt; &amp;lt;canvas id=&quot;game-of-life-canvas&quot;&amp;gt;&amp;lt;/canvas&amp;gt; &amp;lt;script src='./bootstrap.js'&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; 为了从 Rust 实现中获得必要的信息,我们需要为 universe 的 width, height 和 指向 cell 数组的指针添加更多的 getter 函数.这些都将暴露给 JavaScript.将这些添加到 wasm-game-of-life/src/lib.rs: /// Public methods, exported to JavaScript. #[wasm_bindgen] impl Universe { // ... pub fn width(&amp;amp;self) -&amp;gt; u32 { self.width } pub fn height(&amp;amp;self) -&amp;gt; u32 { self.height } pub fn cells(&amp;amp;self) -&amp;gt; *const Cell { self.cells.as_ptr() } } 接下来,在 wasm-game-of-life/www/index.js 中,让我们从 wasm-game-of-life 导入 Cell,并定义一些常量,我们将在 渲染到画布时使用这些常量: import { Universe, Cell } from &quot;wasm-game-of-life&quot;; const CELL_SIZE = 5; // px const GRID_COLOR = &quot;#CCCCCC&quot;; const DEAD_COLOR = &quot;#FFFFFF&quot;; const ALIVE_COLOR = &quot;#000000&quot;; 现在,让我们重写其余的 JavaScript 代码.不再写入给 &amp;lt;pre&amp;gt; 写入 textContent 而是绘制到 &amp;lt;canvas&amp;gt;: // Construct the universe, and get its width and height. const universe = Universe.new(); const width = universe.width(); const height = universe.height(); // Give the canvas room for all of our cells and a 1px border // around each of them. const canvas = document.getElementById(&quot;game-of-life-canvas&quot;); canvas.height = (CELL_SIZE + 1) * height + 1; canvas.width = (CELL_SIZE + 1) * width + 1; const ctx = canvas.getContext('2d'); const renderLoop = () =&amp;gt; { universe.tick(); drawGrid(); drawCells(); requestAnimationFrame(renderLoop); }; 为了在 cells 之间绘制网格,我们绘制一组等间距的水平线,和一组等间距的垂直线.这些横纵线交错形成网格. const drawGrid = () =&amp;gt; { ctx.beginPath(); ctx.strokeStyle = GRID_COLOR; // Vertical lines. for (let i = 0; i &amp;lt;= width; i++) { ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0); ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * height + 1); } // Horizontal lines. for (let j = 0; j &amp;lt;= height; j++) { ctx.moveTo(0, j * (CELL_SIZE + 1) + 1); ctx.lineTo((CELL_SIZE + 1) * width + 1, j * (CELL_SIZE + 1) + 1); } ctx.stroke(); }; 我们可以通过 memory 直接访问 WebAssembly 的线性内存, memory 是直接在原始模块 wasm_game_of_life_bg 中定义的.为了绘制 cells,我们得到一个指向 universe cells 的指针,构建一个 Uint8Array 覆盖 cells 缓冲区,在每个细胞上迭代,并根据细胞是死的还是活的分别绘制一个白色或黑色矩形.通过使用指针和 Uint8Array ,我们避免在每个 tick 上跨边界复制 cells. // Import the WebAssembly memory at the top of the file. import { memory } from &quot;wasm-game-of-life/wasm_game_of_life_bg&quot;; // ... const getIndex = (row, column) =&amp;gt; { return row * width + column; }; const drawCells = () =&amp;gt; { const cellsPtr = universe.cells(); const cells = new Uint8Array(memory.buffer, cellsPtr, width * height); ctx.beginPath(); for (let row = 0; row &amp;lt; height; row++) { for (let col = 0; col &amp;lt; width; col++) { const idx = getIndex(row, col); ctx.fillStyle = cells[idx] === Cell.Dead ? DEAD_COLOR : ALIVE_COLOR; ctx.fillRect( col * (CELL_SIZE + 1) + 1, row * (CELL_SIZE + 1) + 1, CELL_SIZE, CELL_SIZE ); } } ctx.stroke(); }; 要开始渲染过程,我们将使用与上面相同的代码来开始渲染循环的第一次迭代: drawGrid(); drawCells(); requestAnimationFrame(renderLoop); 注意, 在调用 requestAnimationFrame(renderLoop) 之前调用 drawGrid() 和 drawCells().我们这样做的原因是在我们进行修改之前绘制 universe 的初始状态.如果我们只是简单的调用 requestAnimationFrame(renderLoop) ,我们最终会得到这样一种情况,第一正被绘制实际上实在第一次调用 universe.tick() 之后,这些细胞将呈现生命周期的第二个 tick. 它起作用了! 在 wasm-game-of-life 目录通过 root 权限运行此命令来重建 WebAssembly 和绑定粘合剂. wasm-pack build 确保您的开发服务器正在运行.如果不是请从 wasm-game-of-life/www 目录中再次启动它: npm run start 如果你刷新 [http://localhost:8080/] 您应该会收到一个令人兴奋的 life 展示! 除此之外,还有一个非常简洁的名为 Hashlife 的算法来实现生命游戏.它使用积极的 memoizing,并且实际上可以以指数的速度更快的计算后代!鉴于此,您可能想知道为什么我们在本教程中年没有使用 heshlife 实现.因为它超出了本文的范围,我们专注于实现 Rust 和 WebAssembly 的结合,但我们强烈推荐您自己去了解 hashlife! 练习 用单个太空飞船初始化 universe. 不是硬编码进行初始化 universe,而是产生一个随机的,每个细胞有一半存活机会的 universe. 提示: 使用 js-sys crate 导入 Math.random JavaScript 函数 答案 首先,将 `js-sys` 依赖添加到 `wasm-game-of-life/Cargo.toml`: ```toml # ... [dependencies] js-sys = &quot;0.3&quot; # ... ``` 然后,使用 js_sys::Math::random 函数进行掷硬币: ```rust extern crate js_sys; // ... if js_sys::Math::random() &amp;lt; 0.5 { // Alive... } else { // Dead... } ``` &amp;lt;/pre&amp;gt; 用字节表示每个单元格可以轻松地对单元格进行迭代,但它是以浪费内存的代价而来的.每个字节是 8 为,但我们只需要一个比特来表示每个细胞是死的还是活的.重新调整数据表示,以便每个单元仅使用一个比特的空间. 答案 在 Rust 中, 你可以使用 [`fuxedbutset` crate 的 `FixedBitSet` 类型](https://crates.io/crates/fixedbitset) 来表示 cells 而不是使用 `Vec`: ```rust // Make sure you also added the dependency to Cargo.toml! extern crate fixedbitset; use fixedbitset::FixedBitSet; // ... #[wasm_bindgen] pub struct Universe { width: u32, height: u32, cells: FixedBitSet, } ``` 可以通过以下方式调整 Universe 构造函数: ```rust pub fn new() -&amp;gt; Universe { let width = 64; let height = 64; let size = (width * height) as usize; let mut cells = FixedBitSet::with_capacity(size); for i in 0..size { cells.set(i, i % 2 == 0 || i % 7 == 0); } Universe { width, height, cells, } } ``` 要更新 Universe 的下一刻度中的 cells,我们使用 `FixedBitSet` 的 set 方法: ```rust next.set(idx, match (cell, live_neighbors) { (true, x) if x &amp;lt; 2 =&amp;gt; false, (true, 2) | (true, 3) =&amp;gt; true, (true, x) if x &amp;gt; 3 =&amp;gt; false, (false, 3) =&amp;gt; true, (otherwise, _) =&amp;gt; otherwise }); ``` 要将指向开头的执政传递给 JavaScript,可以将 `FixedBitSet` 转换为 slice,然后将 slice 转换为指针: ```rust #[wasm_bindgen] impl Universe { // ... pub fn cells(&amp;amp;self) -&amp;gt; *const u32 { self.cells.as_slice().as_ptr() } } ``` 在 JavaScript 中,从 wasm 内存构造 `Uint8Array` 与之前相同,只是数组的长度不再是 `width * height`,而是 `width * height / 8` ,因为我们每个细胞只有一比特而不是一个字节: ```js const cells = new Uint8Array(memory.buffer, cellsPtr, width * height / 8); ``` 给定索引和 Uint8Array`,您用以下函数确定 n th 比特是否设置: ```js const bitIsSet = (n, arr) =&amp;gt; { const byte = Math.floor(n / 8); const mask = 1 &amp;lt;&amp;lt; (n % 8); return (arr[byte] &amp;amp; mask) === mask; }; ``` 有鉴于此,新版本的 drawCells 如下所示: ```js const drawCells = () =&amp;gt; { const cellsPtr = universe.cells(); // This is updated! const cells = new Uint8Array(memory.buffer, cellsPtr, width * height / 8); ctx.beginPath(); for (let row = 0; row &amp;lt; height; row++) { for (let col = 0; col &amp;lt; width; col++) { const idx = getIndex(row, col); // This is updated! ctx.fillStyle = bitIsSet(idx, cells) ? ALIVE_COLOR : DEAD_COLOR; ctx.fillRect( col * (CELL_SIZE + 1) + 1, row * (CELL_SIZE + 1) + 1, CELL_SIZE, CELL_SIZE ); } } ctx.stroke(); }; ``` &amp;lt;/details&amp;gt; 目录 下一篇:测试康威生命游戏 上一篇:康威生命游戏规则 via: https://rustwasm.github.io/book/game-of-life/implementing.html 译者: lkighy 校对: -</summary></entry><entry><title type="html">康威生命游戏规则</title><link href="http://localhost:4000/rust/webassembly/2019/07/13/%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F%E8%A7%84%E5%88%99/" rel="alternate" type="text/html" title="康威生命游戏规则" /><published>2019-07-13T00:00:00-07:00</published><updated>2019-07-13T00:00:00-07:00</updated><id>http://localhost:4000/rust/webassembly/2019/07/13/%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F%E8%A7%84%E5%88%99</id><content type="html" xml:base="http://localhost:4000/rust/webassembly/2019/07/13/%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F%E8%A7%84%E5%88%99/">&lt;p&gt;&lt;em&gt;注意: 如果您已经熟悉康威生命游戏及其规则,请跳到下一部分!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BA%B7%E5%A8%81%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F&quot;&gt;维基百科对康威生命游戏规则进行了很好的描述:&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;生命游戏中，对于任意细胞，规则如下:
每个细胞有两种状态 - 存活或死亡，每个细胞与以自身为中心的周围八格细胞产生互动(如图，黑色为存活，白色为死亡)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;当前细胞为存活状态时,当周围的存活细胞低于2个时(不包含2个)，该细胞变成死亡状态.(模拟生命数量稀少).&lt;/li&gt;
    &lt;li&gt;当前细胞为存活状态时.当周围有2个或3个存活细胞时.该细胞保持原样.&lt;/li&gt;
    &lt;li&gt;当前细胞为存活状态时,当周围有超过3个存活细胞时,该细胞变成死亡状态.(模拟生命数量过多)&lt;/li&gt;
    &lt;li&gt;当前细胞为死亡状态时,当周围有3个存活细胞时,该细胞变成存活状态.(模拟繁殖)
可以把最初的细胞结构定义为种子,当所有在种子中的细胞同时被以上规则处理后,可以得到第一代细胞图.按规则继续处理当前的细胞图,可以得到下一代的细胞图,周而复始.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;考虑以下初始 universe :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://rustwasm.github.io/book/images/game-of-life/initial-universe.png&quot; alt=&quot;initial-universe&quot; width=&quot;45px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们可以通过考虑每个单位来计算下一代.左上角的单元格已经死了.规则 (4) 适用于死细胞的唯一转换规则.但是,因为左上角的单元格没有正好三个活着的邻居,所以转换规则不适用,并且它在下一代任然如此.对于第一行的每个其他单位也是如此.&lt;/p&gt;

&lt;p&gt;当我们考虑第二行第三列的时候,情况变得有趣了.对于活细胞,前三个规则中的任何一个都可能适用.在这个单元格的情况下,它只有一个活着的邻居,因此规则 (1) 适用:这个细胞将在下一代死亡.同样的命运等着第四行第三列的细胞.&lt;/p&gt;

&lt;p&gt;中间活着的低保有两个邻居:顶部和底部的活细胞.这意味着规则 (2) 适用,它将存活至下一代.&lt;/p&gt;

&lt;p&gt;最有趣的案例是中间活着的细胞的左侧和右侧的死细胞.这三个活细胞都是这些细胞的邻居,这意味着规则 (4) 适用,这些细胞将在下一代中存活.&lt;/p&gt;

&lt;p&gt;把他们放在一起,我们在下一代得到这个 universe :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://rustwasm.github.io/book/images/game-of-life/next-universe.png&quot; alt=&quot;next-universe&quot; width=&quot;45px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;从这些简单的,确定的规则,出现奇怪的令人兴奋的行为:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;滑翔机(4轮)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;脉冲星(周期=3轮)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;太空船(4轮)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/e/e5/Gospers_glider_gun.gif&quot; alt=&quot;滑翔机&quot; /&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/0/07/Game_of_life_pulsar.gif&quot; alt=&quot;脉冲星&quot; /&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/37/Game_of_life_animated_LWSS.gif&quot; alt=&quot;太空船&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;练习&quot;&gt;练习&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;手动计算我们示例的 universe 的下一代.感觉到熟悉吗?&lt;/p&gt;

    &lt;details&gt;
  &lt;summary&gt;答案&lt;/summary&gt;

  它应该又回到了示例 universe 的初始状态:

  &lt;img src=&quot;https://rustwasm.github.io/book/images/game-of-life/initial-universe.png&quot; alt=&quot;initial-universe&quot; width=&quot;45px&quot; /&gt;

  &lt;/details&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;你能找到一个稳定的初始 universe 吗?也就是说每一代都是一样的 universe.&lt;/p&gt;

    &lt;details&gt;
  &lt;summary&gt;答案&lt;/summary&gt;

  有无数的稳定 universe !平凡稳定的 universe 是空的 universe .一个 2 × 2 方格的活细胞也是一个稳定的 universe

  &lt;/details&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/rust/webassembly/2019/08/22/WebAssembly之书目录&quot;&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;下一篇:&lt;a href=&quot;/rust/webassembly/2019/08/18/实现康威生命游戏/&quot;&gt;&lt;strong&gt;实现康威生命游戏&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;上一篇:&lt;a href=&quot;/rust/webassembly/2019/07/12/Hello,World/&quot;&gt;&lt;strong&gt;hello,World!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;via: &lt;a href=&quot;https://rustwasm.github.io/book/game-of-life/rules.html&quot;&gt;https://rustwasm.github.io/book/game-of-life/rules.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;译者: lkighy&lt;/li&gt;
  &lt;li&gt;校对: -&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lkighy</name></author><category term="rust" /><category term="WebAssembly" /><category term="翻译" /><summary type="html">注意: 如果您已经熟悉康威生命游戏及其规则,请跳到下一部分! 维基百科对康威生命游戏规则进行了很好的描述: 生命游戏中，对于任意细胞，规则如下: 每个细胞有两种状态 - 存活或死亡，每个细胞与以自身为中心的周围八格细胞产生互动(如图，黑色为存活，白色为死亡) 当前细胞为存活状态时,当周围的存活细胞低于2个时(不包含2个)，该细胞变成死亡状态.(模拟生命数量稀少). 当前细胞为存活状态时.当周围有2个或3个存活细胞时.该细胞保持原样. 当前细胞为存活状态时,当周围有超过3个存活细胞时,该细胞变成死亡状态.(模拟生命数量过多) 当前细胞为死亡状态时,当周围有3个存活细胞时,该细胞变成存活状态.(模拟繁殖) 可以把最初的细胞结构定义为种子,当所有在种子中的细胞同时被以上规则处理后,可以得到第一代细胞图.按规则继续处理当前的细胞图,可以得到下一代的细胞图,周而复始. 考虑以下初始 universe : 我们可以通过考虑每个单位来计算下一代.左上角的单元格已经死了.规则 (4) 适用于死细胞的唯一转换规则.但是,因为左上角的单元格没有正好三个活着的邻居,所以转换规则不适用,并且它在下一代任然如此.对于第一行的每个其他单位也是如此. 当我们考虑第二行第三列的时候,情况变得有趣了.对于活细胞,前三个规则中的任何一个都可能适用.在这个单元格的情况下,它只有一个活着的邻居,因此规则 (1) 适用:这个细胞将在下一代死亡.同样的命运等着第四行第三列的细胞. 中间活着的低保有两个邻居:顶部和底部的活细胞.这意味着规则 (2) 适用,它将存活至下一代. 最有趣的案例是中间活着的细胞的左侧和右侧的死细胞.这三个活细胞都是这些细胞的邻居,这意味着规则 (4) 适用,这些细胞将在下一代中存活. 把他们放在一起,我们在下一代得到这个 universe : 从这些简单的,确定的规则,出现奇怪的令人兴奋的行为: 滑翔机(4轮) 脉冲星(周期=3轮) 太空船(4轮) 练习 手动计算我们示例的 universe 的下一代.感觉到熟悉吗? 答案 它应该又回到了示例 universe 的初始状态: 你能找到一个稳定的初始 universe 吗?也就是说每一代都是一样的 universe. 答案 有无数的稳定 universe !平凡稳定的 universe 是空的 universe .一个 2 × 2 方格的活细胞也是一个稳定的 universe 目录 下一篇:实现康威生命游戏 上一篇:hello,World! via: https://rustwasm.github.io/book/game-of-life/rules.html 译者: lkighy 校对: -</summary></entry><entry><title type="html">Hello,World</title><link href="http://localhost:4000/rust/webassembly/2019/07/12/Hello,World/" rel="alternate" type="text/html" title="Hello,World" /><published>2019-07-12T00:00:00-07:00</published><updated>2019-07-12T00:00:00-07:00</updated><id>http://localhost:4000/rust/webassembly/2019/07/12/Hello,World</id><content type="html" xml:base="http://localhost:4000/rust/webassembly/2019/07/12/Hello,World/">&lt;p&gt;开始之前,请确保以按照&lt;a href=&quot;/rust/webassembly/2019/07/11/安装WebAssembly/&quot;&gt;安装说明&lt;/a&gt;进行操作.&lt;/p&gt;

&lt;h2 id=&quot;克隆项目模板&quot;&gt;克隆项目模板&lt;/h2&gt;

&lt;p&gt;这份项目模板预先配置好了默认值,因此您可以快速构建、集成、打包 web 代码.&lt;/p&gt;

&lt;p&gt;使用以下命令克隆项目模板：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;cargo generate --git https://github.com/rustwasm/wasm-pack-template
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这因该会提示您输入新项目的名称.我们将使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;wasm-game-of-life
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;项目结构&quot;&gt;项目结构&lt;/h2&gt;

&lt;p&gt;进入 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life&lt;/code&gt; 项目&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;cd wasm-game-of-life
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我们看看他的内容&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;wasm-game-of-life/
├── Cargo.toml
├── LICENSE_APACHE
├── LICENSE_MIT
├── README.md
└── src
    ├── lib.rs
    └── utils.rs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;让我们详细介绍这些文件&lt;/p&gt;

&lt;h3 id=&quot;wasm-game-of-lifecargotoml&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/Cargo.toml&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt; 文件指定货物的依赖关系和元数据,Rust 的包管理器和构建工具.这个预先配置了一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life&lt;/code&gt; 依赖项,我们将在后面深入介绍一些可选的依赖项,并且正确初始化 &lt;code class=&quot;highlighter-rouge&quot;&gt;crate-type&lt;/code&gt; 以生成 &lt;code class=&quot;highlighter-rouge&quot;&gt;.wasm&lt;/code&gt; 库.&lt;/p&gt;

&lt;h3 id=&quot;wasm-game-of-lifesrclibrs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/src/lib.rs&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/lib.rs&lt;/code&gt; 文件是我们要编译为 WebAssembly 的 Rust 包的根.它使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; 与 JavaScript 进行交互.它导入 &lt;code class=&quot;highlighter-rouge&quot;&gt;window.alert&lt;/code&gt; JavaScript 函数,并导出 &lt;code class=&quot;highlighter-rouge&quot;&gt;greet&lt;/code&gt; Rust 函数,该函数显示警告问候消息.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注: 下面的代码复制进项目,如果报错,则需要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;Cargo.lock&lt;/code&gt; 下 &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies&lt;/code&gt; 添加 &lt;code class=&quot;highlighter-rouge&quot;&gt;cfg-if = &quot;0.1.9&quot;&lt;/code&gt; 表示导入&lt;code class=&quot;highlighter-rouge&quot;&gt;cfg-if&lt;/code&gt; 包&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfg_if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wasm_bindgen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cfg_if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cfg_if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wasm_bindgen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;prelude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;cfg_if!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// When the `wee_alloc` feature is enabled, use `wee_alloc` as the global&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// allocator.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; #&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;cfg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wee_alloc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;crate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wee_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;#[global_allocator]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALLOC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wee_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WeeAlloc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wee_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;WeeAlloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[wasm_bindgen]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[wasm_bindgen]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, wasm-game-of-life!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wasm-game-of-lifesrcutilsrs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/src/utils.rs&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/utils.rs&lt;/code&gt; 模块提供了一些常用的实用程序,可以更轻松的将 Rust 编译成 WebAssembly.我们将在本教程后面更详细地介绍这些使用程序,例如当我们调试 wasm 代码是,但是现在我们可以忽略此文件.&lt;/p&gt;

&lt;h2 id=&quot;构建项目&quot;&gt;构建项目&lt;/h2&gt;

&lt;p&gt;我们使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-pack&lt;/code&gt; 进行以下构建步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;确保我们有 Rust 1.30 或更高版本,并且通过 rustup 安装了 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm32-unknown-unknown&lt;/code&gt; ,&lt;/li&gt;
  &lt;li&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo&lt;/code&gt; 将我们的 Rust 源代码编译成 WebAssembly &lt;code class=&quot;highlighter-rouge&quot;&gt;.wasm&lt;/code&gt; 项目.&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; 生成 Javascript API 以使用我们的 Rust 生成的 WebAssembly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;要完成这些,请在项目目录运行此命令:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;wasm-pack build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;构建完成后,我们可以在 &lt;code class=&quot;highlighter-rouge&quot;&gt;pkg&lt;/code&gt; 目录中找到它的文件,它应该包含以下内容：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;pkg/
├── package.json
├── README.md
├── wasm_game_of_life_bg.wasm
├── wasm_game_of_life.d.ts
└── wasm_game_of_life.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; 文件是从主项目复制的,但其他文件是新创建的.&lt;/p&gt;

&lt;h3 id=&quot;wasm-game-of-lifepkgwasm_game_of_life_bgwasm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/pkg/wasm_game_of_life_bg.wasm&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.wasm&lt;/code&gt; 文件时由 Rust 编译器从 Rust 源码生成的 WebAssembly 二进制文件.它将所有所有 Rust 函数和数据编译成的 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm&lt;/code&gt; 版本.例如,它具有 “greet” 功能.&lt;/p&gt;

&lt;h3 id=&quot;wasm-game-of-lifepkgwasm-game-of-lifejs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/pkg/wasm-game-of-life.js&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.js&lt;/code&gt; 文件是由 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-bindgen&lt;/code&gt; 生成的,包含 JavaScript 粘合剂,用于将 DOM 和 JavaScript 函数导入 Rust 并向 WebAssembly 函数公开一个很好的 API 到 JavaScript. 例如,有一个 JavaScript &lt;code class=&quot;highlighter-rouge&quot;&gt;greet&lt;/code&gt; 函数,它包装从 WebAssembly 模块导出的 &lt;code class=&quot;highlighter-rouge&quot;&gt;greet&lt;/code&gt; 函数,现在这个粘合剂并没有太多作用,但是当我们开始在 wasm 和 JavaScript 之间来回传递更多有趣的值时,它将有助于这些值的传递.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javaScript&quot;&gt;import * as wasm from './wasm_game_of_life_bg';

// ...

export function greet() {
    return wasm.greet();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;wasm-game-of-lifepkgwasm_game_of_lifedts&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/pkg/wasm_game_of_life.d.ts&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.d.ts&lt;/code&gt; 文件包含 JavaScript 粘合剂的 TypeScript 类型声明,如果您使用的是 TypeScript,则可以选中对 WebAssembly
函数类型的调用,并且您的 IDE 可以提供自动完成和建议！ 如果您不使用 TypeScript,则可以忽略此文件.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;export function greet(): void;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;wasm-game-of-lifepkgpackagejson&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/pkg/package.json&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 文件包含有关生成的 JavaScript 和 WebAssembly 包的元数据.&lt;/a&gt; npm 和 JavaScript 捆绑包使用它来确定包、包名、版本和一堆其他东西之间的依赖关系.它帮助我们与 JavaScript 工具集成,并允许我们将我们的包发布到 npm.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wasm-game-of-life&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;collaborators&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Your Name &amp;lt;your.email@example.com&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;files&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wasm_game_of_life_bg.wasm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wasm_game_of_life.d.ts&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wasm_game_of_life.js&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;types&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wasm_game_of_life.d.ts&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;将它放入网页&quot;&gt;将它放入网页&lt;/h2&gt;

&lt;p&gt;要获取我们的 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life&lt;/code&gt; 包并在网页中使用它,我们使用 &lt;a href=&quot;https://github.com/rustwasm/create-wasm-app&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create-wasm-app&lt;/code&gt; JavaScript 项目模板&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life&lt;/code&gt; 目录中运行此命令:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;npm init wasm-app www
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是我们新的 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www&lt;/code&gt; 子目录包含的内容:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;wasm-game-of-life/www/
├── bootstrap.js
├── index.html
├── index.js
├── LICENSE-APACHE
├── LICENSE-MIT
├── package.json
├── README.md
└── webpack.config.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再一次,让我们仔细看看其中的一些文件.&lt;/p&gt;

&lt;h3 id=&quot;wasm-game-of-lifewwwpackagejson&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www/package.json&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;这个 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; 预先配置了 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack-dev-server&lt;/code&gt; 依赖项,以及对 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello-wasm-pack&lt;/code&gt; 的依赖,&lt;code class=&quot;highlighter-rouge&quot;&gt;hello-wasm-pack&lt;/code&gt; 是已发布到 npm 的初始 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-pack-template&lt;/code&gt; 包的一个版本.&lt;/p&gt;

&lt;h3 id=&quot;wasm-game-of-lifewwwwebpackconfigjs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www/webpack.config.js&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;此文件配置 webpack 及器本低开发服务器.他是预配置的,您根本不需要调整它已使用 webpack 以及本低开发服务器正常工作.&lt;/p&gt;

&lt;h3 id=&quot;wasm-game-of-lifewwwindexhtml&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www/index.html&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;这是网页的根 HTML 文件.它除了加载 bootstrap.js 之外没什么用处,它是 index.js 的一个非常薄弱的包装器.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;
    &amp;lt;title&amp;gt;Hello wasm-pack!&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;script src=&quot;./bootstrap.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;wasm-game-of-lifewwwindexjs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www/index.js&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.js&lt;/code&gt; 是我们网页 JavaScript 的主要入口点.它导入了 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello-wasm-pack&lt;/code&gt; npm 包,包博涵默认的 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-pack-template&lt;/code&gt; 编译 WebAssembly 和 JavaScript 的粘合剂,然后调用 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello-wasm-pack&lt;/code&gt; 的 greet 函数.&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wasm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello-wasm-pack&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;wasm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;安装依赖项&quot;&gt;安装依赖项&lt;/h2&gt;

&lt;p&gt;首先,通过在 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www&lt;/code&gt; 子目录中运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install&lt;/code&gt; 来确保安装本地开发服务器及其依赖项:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此命令只需要运行一次,并将安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack&lt;/code&gt; JavaScript bundler 及其开发服务器.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意, 使用 Rust 和 WebAssembly 不需要 webpack, 它只是我们为方便起见而选择的 bundler 和开发服务器,Parcel 和 Rollup 还应该支持将 WebAssembly 导入为 ECMAscript 模块.如果您愿意,也可在没有捆绑器的情况下使用 Rust 和 WebAssembly!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;在-www-中使用-我们本地的-wasm-game-of-life-包&quot;&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;www&lt;/code&gt; 中使用 我们本地的 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life&lt;/code&gt; 包&lt;/h2&gt;

&lt;p&gt;我们希望使用本地的 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life&lt;/code&gt; 软件包,而不是使用来自 npm 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello-wasm-pack&lt;/code&gt; 软件包.浙江使我们能够逐步发展我们的 wasm-game-of-life` 计划.&lt;/p&gt;

&lt;p&gt;打开 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www/package.json&lt;/code&gt; 并编辑 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;dependencies&quot;&lt;/code&gt; 以包含 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;wasm-game-of-life&quot;:&quot;file:../pkg&lt;/code&gt; 条目:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javaScript&quot;&gt;    // ...
    &quot;dependencies&quot;: {
        &quot;wasm-game-of-life&quot;:&quot;file:../pkg&quot;, // add this line!
        // ...
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来,修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www/index.js&lt;/code&gt; 以导入 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life&lt;/code&gt; 而不是 &lt;code class=&quot;highlighter-rouge&quot;&gt;hello-wasm-pack&lt;/code&gt; 包:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javaScript&quot;&gt;import * as wasm from &quot;wasm-game-of-life&quot;;

wasm.greet();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由我们声明一个新的依赖项,我们需要安装它：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们的网页现在已准备好在本地访问了！&lt;/p&gt;

&lt;h2 id=&quot;本地服务&quot;&gt;本地服务&lt;/h2&gt;

&lt;p&gt;接下来,打开开发服务器的新终端.在新终端运行服务器让它在后台运行,并且不会阻止我们在此起见运行去其他命令.在新终端中,从 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/www&lt;/code&gt; 目录中运行此命令:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在浏览器导航到 &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt; 您将看到一条警告信息:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://rustwasm.github.io/book/images/game-of-life/hello-world.png&quot; alt=&quot;hello-world&quot; /&gt;&lt;/p&gt;

&lt;p&gt;无论何时进行更改并希望他们反映在 &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt;, 只需要在 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life&lt;/code&gt; 目录中运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-pack build&lt;/code&gt; 命令.&lt;/p&gt;

&lt;h2 id=&quot;练习&quot;&gt;练习&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of-life/src/lib.rs&lt;/code&gt; 中的greet 函数,取一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;name: &amp;amp;str&lt;/code&gt; 参数,自定义一个 alerted 消息,并将你的名字传递给来自 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-game-of life/www/index.js&lt;/code&gt;.使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-pack&lt;/code&gt; 重新构建 &lt;code class=&quot;highlighter-rouge&quot;&gt;.wasm&lt;/code&gt; 二进制文件,然后在 Web 浏览器中刷新 &lt;a href=&quot;http://localhost:8080/&quot;&gt;http://localhost:8080/&lt;/a&gt; ,您应该看到自定义问候语！&lt;/li&gt;
&lt;/ul&gt;

&lt;details&gt;
&lt;summary&gt;答案&lt;/summary&gt;

该 `greet` 功能的新版本 `wasm-game-of-life/src/lib.rs`:

```rust
#![allow(unused_variables)]
fn main() {
  #[wasm_bindgen]
  pub fn greet(name: &amp;amp;str) {
      alert(&amp;amp;format!(&quot;Hello, {}!&quot;, name));
  }
}
```

  新调用 `greet` 的 `wasm-game-of-life/www/index.js`:

```js
wasm.greet(&quot;Your Name&quot;);
```

&lt;/details&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/rust/webassembly/2019/08/22/WebAssembly之书目录&quot;&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;下一篇:&lt;a href=&quot;/rust/webassembly/2019/07/13/康威生命游戏规则/&quot;&gt;&lt;strong&gt;康威生命游戏的游戏规则&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;上一篇:&lt;a href=&quot;/rust/webassembly/2019/07/11/安装WebAssembly/&quot;&gt;&lt;strong&gt;安装 WebAssembly&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;via: &lt;a href=&quot;https://rustwasm.github.io/book/game-of-life/hello-world.html&quot;&gt;https://rustwasm.github.io/book/game-of-life/hello-world.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;译者: lkighy&lt;/li&gt;
  &lt;li&gt;校对: -&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lkighy</name></author><category term="rust" /><category term="WebAssembly" /><category term="翻译" /><summary type="html">开始之前,请确保以按照安装说明进行操作. 克隆项目模板 这份项目模板预先配置好了默认值,因此您可以快速构建、集成、打包 web 代码. 使用以下命令克隆项目模板： cargo generate --git https://github.com/rustwasm/wasm-pack-template 这因该会提示您输入新项目的名称.我们将使用 wasm-game-of-life. wasm-game-of-life 项目结构 进入 wasm-game-of-life 项目 cd wasm-game-of-life 让我们看看他的内容 wasm-game-of-life/ ├── Cargo.toml ├── LICENSE_APACHE ├── LICENSE_MIT ├── README.md └── src ├── lib.rs └── utils.rs 让我们详细介绍这些文件 wasm-game-of-life/Cargo.toml Cargo.toml 文件指定货物的依赖关系和元数据,Rust 的包管理器和构建工具.这个预先配置了一个 wasm-game-of-life 依赖项,我们将在后面深入介绍一些可选的依赖项,并且正确初始化 crate-type 以生成 .wasm 库. wasm-game-of-life/src/lib.rs src/lib.rs 文件是我们要编译为 WebAssembly 的 Rust 包的根.它使用 wasm-bindgen 与 JavaScript 进行交互.它导入 window.alert JavaScript 函数,并导出 greet Rust 函数,该函数显示警告问候消息. 注: 下面的代码复制进项目,如果报错,则需要在 Cargo.lock 下 dependencies 添加 cfg-if = &quot;0.1.9&quot; 表示导入cfg-if 包 extern crate cfg_if; extern crate wasm_bindgen; mod utils; use cfg_if::cfg_if; use wasm_bindgen::prelude::*; cfg_if! { // When the `wee_alloc` feature is enabled, use `wee_alloc` as the global // allocator. if #[cfg(feature = &quot;wee_alloc&quot;)] { extern crate wee_alloc; #[global_allocator] static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT; } } #[wasm_bindgen] extern { fn alert(s: &amp;amp;str); } #[wasm_bindgen] pub fn greet() { alert(&quot;Hello, wasm-game-of-life!&quot;); } wasm-game-of-life/src/utils.rs src/utils.rs 模块提供了一些常用的实用程序,可以更轻松的将 Rust 编译成 WebAssembly.我们将在本教程后面更详细地介绍这些使用程序,例如当我们调试 wasm 代码是,但是现在我们可以忽略此文件. 构建项目 我们使用 wasm-pack 进行以下构建步骤： 确保我们有 Rust 1.30 或更高版本,并且通过 rustup 安装了 wasm32-unknown-unknown , 通过 cargo 将我们的 Rust 源代码编译成 WebAssembly .wasm 项目. 使用 wasm-bindgen 生成 Javascript API 以使用我们的 Rust 生成的 WebAssembly. 要完成这些,请在项目目录运行此命令: wasm-pack build 构建完成后,我们可以在 pkg 目录中找到它的文件,它应该包含以下内容： pkg/ ├── package.json ├── README.md ├── wasm_game_of_life_bg.wasm ├── wasm_game_of_life.d.ts └── wasm_game_of_life.js README.md 文件是从主项目复制的,但其他文件是新创建的. wasm-game-of-life/pkg/wasm_game_of_life_bg.wasm .wasm 文件时由 Rust 编译器从 Rust 源码生成的 WebAssembly 二进制文件.它将所有所有 Rust 函数和数据编译成的 wasm 版本.例如,它具有 “greet” 功能. wasm-game-of-life/pkg/wasm-game-of-life.js .js 文件是由 wasm-bindgen 生成的,包含 JavaScript 粘合剂,用于将 DOM 和 JavaScript 函数导入 Rust 并向 WebAssembly 函数公开一个很好的 API 到 JavaScript. 例如,有一个 JavaScript greet 函数,它包装从 WebAssembly 模块导出的 greet 函数,现在这个粘合剂并没有太多作用,但是当我们开始在 wasm 和 JavaScript 之间来回传递更多有趣的值时,它将有助于这些值的传递. import * as wasm from './wasm_game_of_life_bg'; // ... export function greet() { return wasm.greet(); } wasm-game-of-life/pkg/wasm_game_of_life.d.ts .d.ts 文件包含 JavaScript 粘合剂的 TypeScript 类型声明,如果您使用的是 TypeScript,则可以选中对 WebAssembly 函数类型的调用,并且您的 IDE 可以提供自动完成和建议！ 如果您不使用 TypeScript,则可以忽略此文件. export function greet(): void; wasm-game-of-life/pkg/package.json package.json 文件包含有关生成的 JavaScript 和 WebAssembly 包的元数据. npm 和 JavaScript 捆绑包使用它来确定包、包名、版本和一堆其他东西之间的依赖关系.它帮助我们与 JavaScript 工具集成,并允许我们将我们的包发布到 npm. { &quot;name&quot;: &quot;wasm-game-of-life&quot;, &quot;collaborators&quot;: [ &quot;Your Name &amp;lt;your.email@example.com&amp;gt;&quot; ], &quot;description&quot;: null, &quot;version&quot;: &quot;0.1.0&quot;, &quot;license&quot;: null, &quot;repository&quot;: null, &quot;files&quot;: [ &quot;wasm_game_of_life_bg.wasm&quot;, &quot;wasm_game_of_life.d.ts&quot; ], &quot;main&quot;: &quot;wasm_game_of_life.js&quot;, &quot;types&quot;: &quot;wasm_game_of_life.d.ts&quot; } 将它放入网页 要获取我们的 wasm-game-of-life 包并在网页中使用它,我们使用 create-wasm-app JavaScript 项目模板. 在 wasm-game-of-life 目录中运行此命令: npm init wasm-app www 这是我们新的 wasm-game-of-life/www 子目录包含的内容: wasm-game-of-life/www/ ├── bootstrap.js ├── index.html ├── index.js ├── LICENSE-APACHE ├── LICENSE-MIT ├── package.json ├── README.md └── webpack.config.js 再一次,让我们仔细看看其中的一些文件. wasm-game-of-life/www/package.json 这个 package.json 预先配置了 webpack 和 webpack-dev-server 依赖项,以及对 hello-wasm-pack 的依赖,hello-wasm-pack 是已发布到 npm 的初始 wasm-pack-template 包的一个版本. wasm-game-of-life/www/webpack.config.js 此文件配置 webpack 及器本低开发服务器.他是预配置的,您根本不需要调整它已使用 webpack 以及本低开发服务器正常工作. wasm-game-of-life/www/index.html 这是网页的根 HTML 文件.它除了加载 bootstrap.js 之外没什么用处,它是 index.js 的一个非常薄弱的包装器. &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt; &amp;lt;title&amp;gt;Hello wasm-pack!&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;script src=&quot;./bootstrap.js&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; wasm-game-of-life/www/index.js index.js 是我们网页 JavaScript 的主要入口点.它导入了 hello-wasm-pack npm 包,包博涵默认的 wasm-pack-template 编译 WebAssembly 和 JavaScript 的粘合剂,然后调用 hello-wasm-pack 的 greet 函数. import * as wasm from &quot;hello-wasm-pack&quot;; wasm.greet(); 安装依赖项 首先,通过在 wasm-game-of-life/www 子目录中运行 npm install 来确保安装本地开发服务器及其依赖项: npm install 此命令只需要运行一次,并将安装 webpack JavaScript bundler 及其开发服务器. 注意, 使用 Rust 和 WebAssembly 不需要 webpack, 它只是我们为方便起见而选择的 bundler 和开发服务器,Parcel 和 Rollup 还应该支持将 WebAssembly 导入为 ECMAscript 模块.如果您愿意,也可在没有捆绑器的情况下使用 Rust 和 WebAssembly! 在 www 中使用 我们本地的 wasm-game-of-life 包 我们希望使用本地的 wasm-game-of-life 软件包,而不是使用来自 npm 的 hello-wasm-pack 软件包.浙江使我们能够逐步发展我们的 wasm-game-of-life` 计划. 打开 wasm-game-of-life/www/package.json 并编辑 &quot;dependencies&quot; 以包含 &quot;wasm-game-of-life&quot;:&quot;file:../pkg 条目: // ... &quot;dependencies&quot;: { &quot;wasm-game-of-life&quot;:&quot;file:../pkg&quot;, // add this line! // ... } 接下来,修改 wasm-game-of-life/www/index.js 以导入 wasm-game-of-life 而不是 hello-wasm-pack 包: import * as wasm from &quot;wasm-game-of-life&quot;; wasm.greet(); 由我们声明一个新的依赖项,我们需要安装它： npm install 我们的网页现在已准备好在本地访问了！ 本地服务 接下来,打开开发服务器的新终端.在新终端运行服务器让它在后台运行,并且不会阻止我们在此起见运行去其他命令.在新终端中,从 wasm-game-of-life/www 目录中运行此命令: npm run start 在浏览器导航到 http://localhost:8080/ 您将看到一条警告信息: 无论何时进行更改并希望他们反映在 http://localhost:8080/, 只需要在 wasm-game-of-life 目录中运行 wasm-pack build 命令. 练习 修改 wasm-game-of-life/src/lib.rs 中的greet 函数,取一个 name: &amp;amp;str 参数,自定义一个 alerted 消息,并将你的名字传递给来自 wasm-game-of life/www/index.js.使用 wasm-pack 重新构建 .wasm 二进制文件,然后在 Web 浏览器中刷新 http://localhost:8080/ ,您应该看到自定义问候语！ 答案 该 `greet` 功能的新版本 `wasm-game-of-life/src/lib.rs`: ```rust #![allow(unused_variables)] fn main() { #[wasm_bindgen] pub fn greet(name: &amp;amp;str) { alert(&amp;amp;format!(&quot;Hello, {}!&quot;, name)); } } ``` 新调用 `greet` 的 `wasm-game-of-life/www/index.js`: ```js wasm.greet(&quot;Your Name&quot;); ``` 目录 下一篇:康威生命游戏的游戏规则 上一篇:安装 WebAssembly via: https://rustwasm.github.io/book/game-of-life/hello-world.html 译者: lkighy 校对: -</summary></entry><entry><title type="html">安装 WebAssembly</title><link href="http://localhost:4000/rust/webassembly/2019/07/11/%E5%AE%89%E8%A3%85WebAssembly/" rel="alternate" type="text/html" title="安装 WebAssembly" /><published>2019-07-11T00:00:00-07:00</published><updated>2019-07-11T00:00:00-07:00</updated><id>http://localhost:4000/rust/webassembly/2019/07/11/%E5%AE%89%E8%A3%85WebAssembly</id><content type="html" xml:base="http://localhost:4000/rust/webassembly/2019/07/11/%E5%AE%89%E8%A3%85WebAssembly/">&lt;h1 id=&quot;rust-工具链&quot;&gt;Rust 工具链&lt;/h1&gt;

&lt;p&gt;你需要安装标准的 Rust 工具链，包括 &lt;code class=&quot;highlighter-rouge&quot;&gt;rustup&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rustc&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rust-lang.org/tools/install&quot;&gt;按照以下说明安装 Rust 工具链&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;使用 Rust 和 WebAssembly 的最佳体验是使用 Rust 发布的稳定版。这意味着我们不需要任何实验版本。但是我们需要 Rust 1.30 及更高版本。&lt;/p&gt;

&lt;h2 id=&quot;wasm-pack&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-pack&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;wasm-pack&lt;/code&gt; 是您构建、测试和发布 Rust 生成的 WebAssembly 的网站和商店。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rustwasm.github.io/wasm-pack/installer/&quot;&gt;从这里获取&lt;code class=&quot;highlighter-rouge&quot;&gt;wasn-pack&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;cargo-generate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cargo-generate&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/ashleygwilliams/cargo-generate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cargo-generate&lt;/code&gt; 通过预先存在的 git 存储库作为模板，帮助您快速驱动并运行新的 Rust 项目。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用以下命令安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo-generate&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;cargo install cargo-generate
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;npm&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; 是 JavaScript 的包管理器。我们将使用它来安装和运行 JavaScript 捆绑器和开发服务器。在本教程结束时，我们将编译的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.wasm&lt;/code&gt; 发布到 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt; 注册表。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/get-npm&quot;&gt;按照以下说明按照 &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果您已经安装了 npm，请确保它是最新版本的命令：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-hljs&quot;&gt;npm install npm@latest -g
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/rust/webassembly/2019/08/22/WebAssembly之书目录&quot;&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;下一篇:&lt;a href=&quot;/rust/webassembly/2019/07/12/Hello,World/&quot;&gt;&lt;strong&gt;Hello,World!&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;上一篇:&lt;a href=&quot;/rust/webassembly/2019/07/10/教程-康威的生命游戏/&quot;&gt;&lt;strong&gt;教程:康威的生命游戏&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;via: &lt;a href=&quot;https://rustwasm.github.io/book/game-of-life/setup.html&quot;&gt;https://rustwasm.github.io/book/game-of-life/setup.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;译者: lkighy&lt;/li&gt;
  &lt;li&gt;校对: -&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lkighy</name></author><category term="rust" /><category term="WebAssembly" /><category term="翻译" /><summary type="html">Rust 工具链</summary></entry><entry><title type="html">教程:康威的生命游戏</title><link href="http://localhost:4000/rust/webassembly/2019/07/10/%E6%95%99%E7%A8%8B-%E5%BA%B7%E5%A8%81%E7%9A%84%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/" rel="alternate" type="text/html" title="教程:康威的生命游戏" /><published>2019-07-10T00:00:00-07:00</published><updated>2019-07-10T00:00:00-07:00</updated><id>http://localhost:4000/rust/webassembly/2019/07/10/%E6%95%99%E7%A8%8B-%E5%BA%B7%E5%A8%81%E7%9A%84%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F</id><content type="html" xml:base="http://localhost:4000/rust/webassembly/2019/07/10/%E6%95%99%E7%A8%8B-%E5%BA%B7%E5%A8%81%E7%9A%84%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/">&lt;h2 id=&quot;这个教程适用于什么人&quot;&gt;这个教程适用于什么人?&lt;/h2&gt;

&lt;p&gt;本教程适用于已具备基本 Rust 和 JavaScript 经验的任何人，并希望学习如何一起使用 Rust, WebAssembly 和 JavaScript。&lt;/p&gt;

&lt;h2 id=&quot;我将学到什么&quot;&gt;我将学到什么?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;如何设置将 Rust 编译为 WebAssembly 的工具链,&lt;/li&gt;
  &lt;li&gt;一种由 Rust, WebAssembly, JavaScript, HTML 和 CSS 组成的多语言程序的工作流程,&lt;/li&gt;
  &lt;li&gt;如何设计 API 以最大限度地利用 Rust 和 WebAssembly 的优势以及 JavaScript 的优势,&lt;/li&gt;
  &lt;li&gt;如何调试 Rust 编写的 WebAssembly 模块,&lt;/li&gt;
  &lt;li&gt;如何配置 Rust 和 WebAssembly 程序，使他们更快,&lt;/li&gt;
  &lt;li&gt;如何调整 Rust 编写的 WebAssembly 程序的大小，是 &lt;code class=&quot;highlighter-rouge&quot;&gt;.wasm&lt;/code&gt; 二进制文件更小、更快，使之可以通过网络更快的访问。&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/rust/webassembly/2019/08/22/WebAssembly之书目录&quot;&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;下一篇:&lt;a href=&quot;/rust/webassembly/2019/07/11/安装WebAssembly/&quot;&gt;&lt;strong&gt;安装 WebAssembly&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;上一篇:&lt;a href=&quot;/rust/webassembly/2019/07/09/什么是WebAssembly/&quot;&gt;&lt;strong&gt;什么是 WebAssembly?&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;如果您还读过该系列文章,建议您从&lt;a href=&quot;/rust/webassembly/2019/07/07/rust-和-WebAssembly/&quot;&gt;&lt;strong&gt;Rust 🦀 和 WebAssembly 🕸&lt;/strong&gt;&lt;/a&gt;开始阅读&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;via: &lt;a href=&quot;https://rustwasm.github.io/book/game-of-life/introduction.html&quot;&gt;https://rustwasm.github.io/book/game-of-life/introduction.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;译者: lkighy&lt;/li&gt;
  &lt;li&gt;校对: -&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lkighy</name></author><category term="rust" /><category term="WebAssembly" /><category term="翻译" /><summary type="html">这个教程适用于什么人? 本教程适用于已具备基本 Rust 和 JavaScript 经验的任何人，并希望学习如何一起使用 Rust, WebAssembly 和 JavaScript。 我将学到什么? 如何设置将 Rust 编译为 WebAssembly 的工具链, 一种由 Rust, WebAssembly, JavaScript, HTML 和 CSS 组成的多语言程序的工作流程, 如何设计 API 以最大限度地利用 Rust 和 WebAssembly 的优势以及 JavaScript 的优势, 如何调试 Rust 编写的 WebAssembly 模块, 如何配置 Rust 和 WebAssembly 程序，使他们更快, 如何调整 Rust 编写的 WebAssembly 程序的大小，是 .wasm 二进制文件更小、更快，使之可以通过网络更快的访问。 目录 下一篇:安装 WebAssembly 上一篇:什么是 WebAssembly? 如果您还读过该系列文章,建议您从Rust 🦀 和 WebAssembly 🕸开始阅读 via: https://rustwasm.github.io/book/game-of-life/introduction.html 译者: lkighy 校对: -</summary></entry><entry><title type="html">什么是 WebAssembly?</title><link href="http://localhost:4000/rust/webassembly/2019/07/09/%E4%BB%80%E4%B9%88%E6%98%AFWebAssembly/" rel="alternate" type="text/html" title="什么是 WebAssembly?" /><published>2019-07-09T00:00:00-07:00</published><updated>2019-07-09T00:00:00-07:00</updated><id>http://localhost:4000/rust/webassembly/2019/07/09/%E4%BB%80%E4%B9%88%E6%98%AFWebAssembly</id><content type="html" xml:base="http://localhost:4000/rust/webassembly/2019/07/09/%E4%BB%80%E4%B9%88%E6%98%AFWebAssembly/">&lt;p&gt;WebAssembly(wasm) 是一种简单的机器模型和可执行格式，具有广泛的规范&lt;a href=&quot;https://webassembly.github.io/spec/&quot;&gt;(extensive specification)&lt;/a&gt;，它设计为便携、紧凑，并以原生速度或接近原生速度执行。&lt;/p&gt;

&lt;p&gt;作为一种编程语言，WebAssembly 由两种相同结构的格式组成，尽管方式不同：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.wat&lt;/code&gt; 文本格式(称为”WebAssembly Text” 的 wat) 使用 &lt;a href=&quot;https://en.wikipedia.org/wiki/S-expression&quot;&gt;S-expressions&lt;/a&gt;，并且与 Lisp 语言系列（如 Scheme 和 Clojure）有一些相似之处。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.wasm&lt;/code&gt;二进制格式是比较低级别的，旨在有 wasm虚拟机直接使用。它在概念上类似于 ELF 和 Mach-O。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;作为参考，这是 &lt;code class=&quot;highlighter-rouge&quot;&gt;wat&lt;/code&gt; 中的阶乘函数：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(module
  (func $fac (param f64) (result f64)
    get_local 0
    f64.const 1
    f64.lt
    if (result f64)
      f64.const 1
    else
      get_local 0
      get_local 0
      f64.const 1
      f64.sub
      call $fac
      f64.mul
    end)
  (export &quot;fac&quot; (func $fac)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果您对 &lt;code class=&quot;highlighter-rouge&quot;&gt;wasm&lt;/code&gt; 文件的外观感兴趣，可以使用这代码 &lt;a href=&quot;https://webassembly.github.io/wabt/demo/wat2wasm/&quot;&gt;wat2wasm dome 演示&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;线性存储linear-memory&quot;&gt;线性存储(Linear Memory)&lt;/h2&gt;

&lt;p&gt;WebAssembly 有一个非常简单的&lt;a href=&quot;https://webassembly.github.io/spec/core/syntax/modules.html#syntax-mem&quot;&gt;内存模型&lt;/a&gt;. wasm模块可以访问单个 “线性内存”, 它本质上是一个平面字节数组.此&lt;a href=&quot;https://webassembly.github.io/spec/core/syntax/instructions.html#syntax-instr-memory&quot;&gt;内存可以以页(64K)大小的倍数增长&lt;/a&gt;,但不能收缩.&lt;/p&gt;

&lt;h2 id=&quot;webassembly-仅适用于-web-吗&quot;&gt;WebAssembly 仅适用于 Web 吗?&lt;/h2&gt;

&lt;p&gt;虽然它目前在 JavaScript 和 Web 社区中收到了广泛的关注,但 wasm 并没有对其主机环境做出臆断.因此推测 wasm 在未来将在各种环境中使用 “轻便可移植”的可能性是存在的.然而到目前为止, wasm 主要与 JavaScript(JS) 关联,JavaScript 有很多特点(包括 Web 和 Node.js).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/rust/webassembly/2019/08/22/WebAssembly之书目录&quot;&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;下一篇:&lt;a href=&quot;/rust/webassembly/2019/07/10/教程-康威的生命游戏/&quot;&gt;&lt;strong&gt;教程-康威的生命游戏&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;上一篇:&lt;a href=&quot;/rust/webassembly/2019/07/08/为什么是Rust和WebAssembly/&quot;&gt;&lt;strong&gt;为什么是Rust 和 WebAssembly&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;via: &lt;a href=&quot;https://rustwasm.github.io/book/what-is-webassembly.html&quot;&gt;https://rustwasm.github.io/book/what-is-webassembly.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;译者: lkighy&lt;/li&gt;
  &lt;li&gt;校对: -&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lkighy</name></author><category term="rust" /><category term="WebAssembly" /><category term="翻译" /><summary type="html">WebAssembly(wasm) 是一种简单的机器模型和可执行格式，具有广泛的规范(extensive specification)，它设计为便携、紧凑，并以原生速度或接近原生速度执行。 作为一种编程语言，WebAssembly 由两种相同结构的格式组成，尽管方式不同： .wat 文本格式(称为”WebAssembly Text” 的 wat) 使用 S-expressions，并且与 Lisp 语言系列（如 Scheme 和 Clojure）有一些相似之处。 .wasm二进制格式是比较低级别的，旨在有 wasm虚拟机直接使用。它在概念上类似于 ELF 和 Mach-O。 作为参考，这是 wat 中的阶乘函数： (module (func $fac (param f64) (result f64) get_local 0 f64.const 1 f64.lt if (result f64) f64.const 1 else get_local 0 get_local 0 f64.const 1 f64.sub call $fac f64.mul end) (export &quot;fac&quot; (func $fac))) 如果您对 wasm 文件的外观感兴趣，可以使用这代码 wat2wasm dome 演示。 线性存储(Linear Memory) WebAssembly 有一个非常简单的内存模型. wasm模块可以访问单个 “线性内存”, 它本质上是一个平面字节数组.此内存可以以页(64K)大小的倍数增长,但不能收缩. WebAssembly 仅适用于 Web 吗? 虽然它目前在 JavaScript 和 Web 社区中收到了广泛的关注,但 wasm 并没有对其主机环境做出臆断.因此推测 wasm 在未来将在各种环境中使用 “轻便可移植”的可能性是存在的.然而到目前为止, wasm 主要与 JavaScript(JS) 关联,JavaScript 有很多特点(包括 Web 和 Node.js). 目录 下一篇:教程-康威的生命游戏 上一篇:为什么是Rust 和 WebAssembly via: https://rustwasm.github.io/book/what-is-webassembly.html 译者: lkighy 校对: -</summary></entry><entry><title type="html">为什么是 Rust 和 WebAssembly？</title><link href="http://localhost:4000/rust/webassembly/2019/07/08/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AFRust%E5%92%8CWebAssembly/" rel="alternate" type="text/html" title="为什么是 Rust 和 WebAssembly？" /><published>2019-07-08T00:00:00-07:00</published><updated>2019-07-08T00:00:00-07:00</updated><id>http://localhost:4000/rust/webassembly/2019/07/08/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AFRust%E5%92%8CWebAssembly</id><content type="html" xml:base="http://localhost:4000/rust/webassembly/2019/07/08/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AFRust%E5%92%8CWebAssembly/">&lt;h2 id=&quot;具有高级的人机工程学ergonomics和低级控制control&quot;&gt;具有高级的人机工程学(Ergonomics)和低级控制(Control)&lt;/h2&gt;

&lt;p&gt;JavaScript Web应用程序很难获得并保持可靠的性能。JavaScript 的动态类型系统和垃圾回收机制对保持可靠的性能没有任何帮助。如果您不小心徘徊在 JIT 的快乐道路上，看似微不足道的代码更改可能会导致严重的性能下降。&lt;/p&gt;

&lt;p&gt;Rust 为程序员提供了低级控制和可靠的性能。它不受 JavaScript 的非确定性垃圾回收的影响。程序员可以控制间接、单拟画和内存布局。&lt;/p&gt;

&lt;h2 id=&quot;小巧的-wasm&quot;&gt;小巧的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.wasm&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;代码的多少非常重要，因为必须通过网络下载 &lt;code class=&quot;highlighter-rouge&quot;&gt;.wasm&lt;/code&gt;。Rust 缺少一个运行时小巧的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.wasm&lt;/code&gt;，因为没有囊肿的垃圾回收器，您只需要为实际使用的功能支付相应的容量（代码的多少）。&lt;/p&gt;

&lt;h2 id=&quot;不需要全部重写&quot;&gt;不需要全部重写&lt;/h2&gt;

&lt;p&gt;不需要丢弃现有的代码库。您可以首先将对性能敏感的 JavaScript 函数移植到 Rust，以获得最好的收益。如果你愿意，你甚至可以在那里停下来。&lt;/p&gt;

&lt;h2 id=&quot;与他人的愉快合作&quot;&gt;与他人的愉快合作&lt;/h2&gt;

&lt;p&gt;Rust 和 WebAssembly 与现有的 JavaScript 工具集成。它支持 ECMAScript 模块，您可以继续使用您喜欢的工具，如 npm, webpack 和 Greenkeeper。&lt;/p&gt;

&lt;h2 id=&quot;你期待的设施&quot;&gt;你期待的设施&lt;/h2&gt;

&lt;p&gt;Rust 拥有开发人员所期待的现代化设施：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;强大的包管理工具 &lt;code class=&quot;highlighter-rouge&quot;&gt;cargo&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;富有表现了(和零成本) 的抽象,&lt;/li&gt;
  &lt;li&gt;和一个热情的社区!😊&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/rust/webassembly/2019/08/22/WebAssembly之书目录&quot;&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;下一篇: &lt;a href=&quot;/rust/webassembly/2019/07/09/什么是WebAssembly/&quot;&gt;&lt;strong&gt;什么是 WebAssembly?&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;上一篇: &lt;a href=&quot;/rust/webassembly/2019/07/07/rust-和-WebAssembly/&quot;&gt;&lt;strong&gt;Rust 🦀 和 WebAssembly 🕸&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;via: &lt;a href=&quot;https://rustwasm.github.io/book/why-rust-and-webassembly.html&quot;&gt;https://rustwasm.github.io/book/why-rust-and-webassembly.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;译者: lkighy&lt;/li&gt;
  &lt;li&gt;校对: -&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lkighy</name></author><category term="rust" /><category term="WebAssembly" /><category term="翻译" /><summary type="html">具有高级的人机工程学(Ergonomics)和低级控制(Control) JavaScript Web应用程序很难获得并保持可靠的性能。JavaScript 的动态类型系统和垃圾回收机制对保持可靠的性能没有任何帮助。如果您不小心徘徊在 JIT 的快乐道路上，看似微不足道的代码更改可能会导致严重的性能下降。 Rust 为程序员提供了低级控制和可靠的性能。它不受 JavaScript 的非确定性垃圾回收的影响。程序员可以控制间接、单拟画和内存布局。 小巧的 .wasm 代码的多少非常重要，因为必须通过网络下载 .wasm。Rust 缺少一个运行时小巧的 .wasm，因为没有囊肿的垃圾回收器，您只需要为实际使用的功能支付相应的容量（代码的多少）。 不需要全部重写 不需要丢弃现有的代码库。您可以首先将对性能敏感的 JavaScript 函数移植到 Rust，以获得最好的收益。如果你愿意，你甚至可以在那里停下来。 与他人的愉快合作 Rust 和 WebAssembly 与现有的 JavaScript 工具集成。它支持 ECMAScript 模块，您可以继续使用您喜欢的工具，如 npm, webpack 和 Greenkeeper。 你期待的设施 Rust 拥有开发人员所期待的现代化设施： 强大的包管理工具 cargo, 富有表现了(和零成本) 的抽象, 和一个热情的社区!😊 目录 下一篇: 什么是 WebAssembly? 上一篇: Rust 🦀 和 WebAssembly 🕸 via: https://rustwasm.github.io/book/why-rust-and-webassembly.html 译者: lkighy 校对: -</summary></entry><entry><title type="html">Rust 🦀 和 WebAssembly 🕸</title><link href="http://localhost:4000/rust/webassembly/2019/07/07/rust-%E5%92%8C-WebAssembly/" rel="alternate" type="text/html" title="Rust 🦀 和 WebAssembly 🕸" /><published>2019-07-07T00:00:00-07:00</published><updated>2019-07-07T00:00:00-07:00</updated><id>http://localhost:4000/rust/webassembly/2019/07/07/rust-%E5%92%8C-WebAssembly</id><content type="html" xml:base="http://localhost:4000/rust/webassembly/2019/07/07/rust-%E5%92%8C-WebAssembly/">&lt;p&gt;这本书描述了 &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;rust&lt;/a&gt; 和 &lt;a href=&quot;https://webassembly.org/&quot;&gt;WebAssembly&lt;/a&gt; 的使用。&lt;/p&gt;

&lt;h2 id=&quot;这本书适合什么人&quot;&gt;这本书适合什么人？&lt;/h2&gt;

&lt;p&gt;本书适用于任何有兴趣将 rust 编译为 WebAssembly 的人，以便在 web 上获得快速、可靠的代码。您应该了解一些 Rust，并熟悉 JavaScript 和 CSS。您不需要成为其中一个的专家。&lt;/p&gt;

&lt;p&gt;不知道 Rust？ 首先从&lt;a href=&quot;https://doc.rust-lang.org/book/&quot;&gt;&lt;em&gt;rust 编程语言开始&lt;/em&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;不懂 JavaScript,HTML 或 CSS？ &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn&quot;&gt;在MDN上了解他们&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;如何阅读本书&quot;&gt;如何阅读本书&lt;/h2&gt;

&lt;p&gt;您应该先阅读&lt;a href=&quot;./2.为什么是Rust和WebAssmbly.md&quot;&gt;使用 Rust 和 WebAssembly 的动机&lt;/a&gt;，并熟悉其&lt;a href=&quot;https://rustwasm.github.io/docs/book/background-and-concepts.html&quot;&gt;背景和概念&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;本教程应头阅读到尾。您应该：自己编写、编译和运行教程代码。如果您之前没有使用过 Rust 和 web Assembly。请从先了解它们。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://rustwasm.github.io/docs/book/reference/index.html&quot;&gt;参考部分&lt;/a&gt;可以按任何顺序进行阅读。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;💡 提示: 您可以通过点击页面顶部的 🔍 图标 或按 s 键来搜索本书。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;为本书做贡献&quot;&gt;为本书做贡献&lt;/h2&gt;

&lt;p&gt;这本书是开源的！找个拼写错误？或我们忽略了什么？向我们&lt;a href=&quot;https://github.com/rustwasm/book&quot;&gt;&lt;strong&gt;发送拉取请求吧&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/rust/webassembly/2019/08/22/WebAssembly之书目录&quot;&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;下一篇: &lt;a href=&quot;/rust/webassembly/2019/07/08/为什么是Rust和WebAssembly/&quot;&gt;&lt;strong&gt;为什么是 Rust 和 WebAssembly？&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;上一篇: -&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;ul&gt;
  &lt;li&gt;via: &lt;a href=&quot;https://rustwasm.github.io/book/introduction.html&quot;&gt;https://rustwasm.github.io/book/introduction.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;译者: lkighy&lt;/li&gt;
  &lt;li&gt;校对: -&lt;/li&gt;
&lt;/ul&gt;</content><author><name>lkighy</name></author><category term="rust" /><category term="WebAssembly" /><category term="翻译" /><summary type="html">这本书描述了 rust 和 WebAssembly 的使用。 这本书适合什么人？ 本书适用于任何有兴趣将 rust 编译为 WebAssembly 的人，以便在 web 上获得快速、可靠的代码。您应该了解一些 Rust，并熟悉 JavaScript 和 CSS。您不需要成为其中一个的专家。 不知道 Rust？ 首先从rust 编程语言开始。 不懂 JavaScript,HTML 或 CSS？ 在MDN上了解他们。 如何阅读本书 您应该先阅读使用 Rust 和 WebAssembly 的动机，并熟悉其背景和概念。 本教程应头阅读到尾。您应该：自己编写、编译和运行教程代码。如果您之前没有使用过 Rust 和 web Assembly。请从先了解它们。 参考部分可以按任何顺序进行阅读。 💡 提示: 您可以通过点击页面顶部的 🔍 图标 或按 s 键来搜索本书。 为本书做贡献 这本书是开源的！找个拼写错误？或我们忽略了什么？向我们发送拉取请求吧。 目录 下一篇: 为什么是 Rust 和 WebAssembly？ 上一篇: - via: https://rustwasm.github.io/book/introduction.html 译者: lkighy 校对: -</summary></entry></feed>